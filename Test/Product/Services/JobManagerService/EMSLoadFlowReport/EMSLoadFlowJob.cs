
//###############################################################
//														        #
//	This code was generated by a PowerFunctionsReportDSL tool.	#
//	Changes to this file may cause incorrect behavior	        #
//	and will be lost if the code is regenerated.		        #
//														        #
//###############################################################

using System;
using System.Collections.Generic;
using System.Linq;
using TelventDMS.Common.DMS.Common;
using System.Runtime.Serialization;


namespace TelventDMS.Services.JobManagerService.EMSLoadFlowReport
{
    [DataContract]
    public partial class EMSLoadFlowNodeReportRecord : AsyncJob
    {
		private void FillEMSLoadFlowNodeReportRecordProperties(List<long> gids)
		{
			long mdc = 0;
			if (gids.Count <= 0) return;
			var iteratorId = GdaQuery.GetDescendentValues(0,
				new List<ModelCode> {
					ModelCode.,
					ModelCode.,
					ModelCode.,
					ModelCode.,
					ModelCode.,
					ModelCode.,
					ModelCode.,

				}, new List<Association>(), busnodeGids, new List<Association>(), ref mdc);
			var count = GdaQuery.IteratorResourcesLeft(iteratorId);
			while (count > 0)
			{
				List<ResourceDescription> rds = GdaQuery.IteratorNext(50000, iteratorId);
				for (int i = 0; i < rds.Count; i++)
				{
					EMSLoadFlowRecordBean data = (hierarhyRecordData[rds[i].Id] as EMSLoadFlowRecordBean)
					if (data == null)
					{
						DMSLogger.Log(DMSLogger.LogLevel.Error, "[EMSLF]: Error occurred while collectingEMSLoadFlowNodeReportRecord. Record data is null!");
						throw new ArgumentNullException("busnodeGids");
					}
					data.VoltageLevel = rds[i].GetProperty(ModelCode.).AsFloat();
					data.Voltage = rds[i].GetProperty(ModelCode.).AsFloat();
					data.PhaseAngle = rds[i].GetProperty(ModelCode.).AsFloat();
					data.Pinj = rds[i].GetProperty(ModelCode.).AsFloat();
					data.Qinj = rds[i].GetProperty(ModelCode.).AsFloat();
					data.Iinj = rds[i].GetProperty(ModelCode.).AsFloat();
					data.CosPhi = rds[i].GetProperty(ModelCode.).AsFloat();

				}
				count -= rds.Count;
			}
			GdaQuery.IteratorClose(iteratorId);
		}


    }
}
