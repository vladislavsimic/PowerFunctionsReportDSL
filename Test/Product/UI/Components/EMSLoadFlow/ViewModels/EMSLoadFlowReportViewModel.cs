
//###############################################################
//														        #
//	This code was generated by a PowerFunctionsReportDSL tool.	#
//	Changes to this file may cause incorrect behavior	        #
//	and will be lost if the code is regenerated.		        #
//														        #
//###############################################################

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using TelventDMS.Common.Components.Utils;
using TelventDMS.Common.DMS.Common;
using TelventDMS.UI.Components.CompositeCommon.Commands;
using TelventDMS.UI.Components.CompositeCommon.Converters;
using TelventDMS.UI.Components.CompositeCommon.Licence;
using TelventDMS.UI.Components.CompositeCommon.ViewModels;
using TelventDMS.UI.Components.CustomControls.HierarchyTreeViewControl.DataProvider;
using TelventDMS.UI.Components.CustomControls.ReportGeneralInfoControl;
using TelventDMS.UI.Components.CustomControls.ReportGeneralInfoControl.Models;
using TelventDMS.UI.Components.EMSLoadFlow.Models;
using TelventDMS.UI.Components.EMSLoadFlow.View;
using TelventDMS.UI.Components.FunctionCommon;
using TelventDMS.UI.Model.Electrical;
using TelventDMS.UI.ServiceProxies;


namespace TelventDMS.UI.Components.EMSLoadFlow.ViewModels
{
    public partial class EMSLoadFlowReportViewModel : ReportDocumentViewModel
    {
        #region Fields
        
		private EMSLoadFlowReportView reportView;
		private HierarchyType hierarchyType;
		private RelayCommand refreshCommand;

    
        #endregion Fields        

        #region Constructors

		public EMSLoadFlowReportViewModel(EMSLoadFlowReportView reportView) : base(reportView)
		{
			this.reportView = reportView;
			this.reportView.CommonHtv.HierarchyTreeViewRefreshed += HierarchyTreeViewRefreshed;
			TreeDataProvider = new HierarchyTreeDataProvider(new List<DMSType>() { DMSType.SOURCE }, HierarchyNetworkType.EMS);
			TreeDataProvider.ExpandTreeOnOpenEventHandler += TreeDataProvider_ExpandTreeOnReportEventHandler;
			hierarchyType = HierarchyType.Container;
			this.reportView.Loaded += ReportView_Loaded;
			SummaryUniqueName = EMSLoadFlowModuleCommands.ShowReport;
		}
       

        #endregion Constructors

        #region Properties
        
        public HierarchyTreeDataProvider TreeDataProvider { get; set; }

        public HierarchyType HierarchyType
		{
			get { return hierarchyType; }
			set
			{
				hierarchyType = value;
				DataProvider.ReportParameter.HierarchyType = hierarchyType;
				DataProvider.Reset();

				TreeDataProvider.ReportParameter.HeirarchyType = hierarchyType;
				TreeDataProvider.Reset();
			}
		}

        public EMSLoadFlowReportDataProvider DataProvider { get; set; }

        #endregion Properties

        #region Command Properties

        public ICommand RefreshCommand
		{
			get
			{
				return refreshCommand ?? (refreshCommand = new RelayCommand(param => RefreshCommandExecute()));
			}
		}

        #endregion Command Properties

        #region Command Methods

        public void RefreshCommandExecute()
		{
			reportView.CommonHtv.RefreshHierarchyTreeView();
		}

        #endregion Command Methods

        #region Methods

        protected internal void HierarchyTreeViewRefreshed()
		{
			DataProvider.Refresh();
		}

        protected internal void ReportView_Loaded(object sender, RoutedEventArgs e)
		{
			EMSLoadFlowReportView view = sender as EMSLoadFlowReportView;
			if (DataProvider == null)
			{
				DataProvider = new EMSLoadFlowReportDataProvider(view);
			}
			if (DataProvider.IsInitialized) return;
			DataProvider.ReportParameter.HierarchyType = HierarchyType.Container;
			DataProvider.ReportParameter.HierarchyNetworkType = HierarchyNetworkType.EMS;
			DataProvider.Init();
		}

        protected internal void TreeDataProvider_ExpandTreeOnReportEventHandler(List<long> inputGids)
		{
			TreeDataProvider.ExpandTreeOnOpenEventHandler -= TreeDataProvider_ExpandTreeOnReportEventHandler;
			if (inputGids != null)
			{
				reportView.CommonHtv.ExpandTreeItemsWithSelectedGids(inputGids);
			}
		}

        protected internal void GenInfo_RefreshTap(object sender, RoutedEventArgs e)
		{
			if (reportView.CommonHtv.GetRoots().Count > 0)
			{
				RefreshCommandExecute();
			}
		}

        protected override void OnDispose()
		{
			DataProvider.Terminate();

			TreeDataProvider.Terminate();
		}

        #endregion Methods
    }
}
