
//###############################################################
//														        #
//	This code was generated by a PowerFunctionsReportDSL tool.	#
//	Changes to this file may cause incorrect behavior	        #
//	and will be lost if the code is regenerated.		        #
//														        #
//###############################################################

using System;
using TelventDMS.Common.Platform.Logger;
using TelventDMS.Common.DMS.Common;
using TelventDMS.UI.Components.CompositeCommon;
using TelventDMS.UI.Components.CompositeCommon.Converters;
using TelventDMS.UI.Components.CompositeCommon.Interfaces;
using TelventDMS.UI.Components.CompositeCommon.ViewModels;
using TelventDMS.UI.Model.Electrical;
using TelventDMS.UI.ServiceProxies;
using TelventDMS.Common.DMS.Common.Converters;


namespace TelventDMS.UI.Components.EMSLoadFlow.ViewModels
{
    public partial class EMSLoadFlowGeneratorViewModel : ViewModelBase, ILocatable
    {
        #region Fields
        
		private EMSLoadFlowGeneratorRecord reportRecord;

		private DMSType recordType;

		private bool rowIsNotVisible;

		private bool tabularViewIsActive;

    
        #endregion Fields        

        #region Constructors

		public EMSLoadFlowGeneratorViewModel()
		{
		}
 

		public EMSLoadFlowGeneratorViewModel(EMSLoadFlowGeneratorRecord reportRecord, bool tabularViewActive)
		{
			if (reportRecord == null)
			{
				DMSLogger.Log(DMSLogger.LogLevel.Error, "Parameter reportRecord passed to EMSLoadFlowGeneratorViewModel(), should not be null.");
				return;
			}
			this.reportRecord = reportRecord;
			recordType = (DMSType)ModelCodeHelper.ExtractTypeFromGlobalId(reportRecord.Lid);
			DataGridTreeViewItemInfo = new HierarchicalReportRecord();
			DataGridTreeViewItemInfo.Lid = reportRecord.Lid;
			DataGridTreeViewItemInfo.Level = reportRecord.Level;
			DataGridTreeViewItemInfo.ElementIsShownInTabularView = reportRecord.ElementIsShownInTabularView;
			if (String.IsNullOrEmpty(reportRecord.Title))
			{
				DataGridTreeViewItemInfo.Title = DmsTypeToEntityNameMapper.GetAutomatedName((DMSType)ModelCodeHelper.ExtractTypeFromGlobalId(reportRecord.Lid), reportRecord.Lid);
			}
			else
			{
				DataGridTreeViewItemInfo.Title = reportRecord.Title;
			}
			tabularViewIsActive = tabularViewActive;
			if (tabularViewActive && !this.reportRecord.ElementIsShownInTabularView)
			{
				rowIsNotVisible = true;
			}
		}
       

        #endregion Constructors

        #region Properties
        
		public long DetailsElementGid
		{
			get { return DataGridTreeViewItemInfo.Lid; }
		}

		public HierarchicalReportRecord DataGridTreeViewItemInfo { get; set; }

		public DMSType RecordType
		{
			get
			{
				return recordType;
			}
			set
			{
				recordType = value;
			}
		}

		public string Title
		{
			get
			{
				if (DataGridTreeViewItemInfo != null)
				{
					return DataGridTreeViewItemInfo.Title;
				}
				return string.Empty;
			}
		}

		public EMSLoadFlowGeneratorRecord ReportRecord
		{
			get
			{
				return reportRecord;
			}
			set
			{
				reportRecord = value;
			}
		}

		public bool TabularViewIsActive
		{
			get
			{
				return tabularViewIsActive;
			}
			set
			{
				tabularViewIsActive = value;
				OnPropertyChanged("TabularViewIsActive");
			}
		}

		public bool RowIsNotVisible
		{
			get
			{
				return rowIsNotVisible;
			}
			set
			{
				rowIsNotVisible = value;
				OnPropertyChanged("RowIsNotVisible");
			}
		}

		public float P
		{
			get
			{
				return reportRecord.P;
			}
		}

		public float Loading
		{
			get
			{
				return reportRecord.Loading;
			}
		}

		public float Q
		{
			get
			{
				return reportRecord.Q;
			}
		}



        #endregion Properties
    }
}
