
//###############################################################
//														        #
//	This code was generated by a PowerFunctionsReportDSL tool.	#
//	Changes to this file may cause incorrect behavior	        #
//	and will be lost if the code is regenerated.		        #
//														        #
//###############################################################

using Microsoft.Practices.ServiceLocation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using TelventDMS.UI.Components.CompositeCommon.AvalonDocument;
using TelventDMS.UI.Components.CompositeCommon.Help;
using TelventDMS.UI.Components.CompositeCommon.Interfaces;
using TelventDMS.UI.Components.CustomControls.HierarchyTreeViewControl;
using TelventDMS.UI.Components.EMSLoadFlow.ViewModels;


namespace TelventDMS.UI.Components.EMSLoadFlow.View
{
    public partial class EMSLoadFlowReportView : ReportDocument, IDisposable
    {
        #region Fields

		private IShellView shellView;
		private EMSLoadFlowReportViewModel reportViewModel;
		private List<long> visibleItemsIds = new List<long>();
		private IWorkspaceManager workspaceManager;
		private IModuleEnvironment moduleEnvironment;


        #endregion Fields

        #region Constructors

		public EMSLoadFlowReportView(IShellView shellView)
		{
			InitializeComponent();
			CanSaveLayout = true;
			ShouldPersistFilter = true;
			HelpProvider.SetContextHelpId(this, "EMSLoadFlow Report");
			this.shellView = shellView;
			this.reportViewModel = new EMSLoadFlowReportViewModel(this);
			moduleEnvironment = ServiceLocator.Current.GetInstance<IModuleEnvironment>();
			DataContext = reportViewModel;
			tabControl.SelectionChanged += TabControl_SelectionChanged;

			CommonHtv.SelectedItemChanged += HTV_SelectedItemChanged;
			CommonHtv.ExpandedCollapsed += HTV_SelectedItemChanged;

			Title = "EMSLoadFlow Report";
			InfoTip = "EMSLoadFlow Report";

			this.workspaceManager = moduleEnvironment.WorkspaceManager;
		}


        #endregion Constructors

        #region Methods

		protected internal void HTV_SelectedItemChanged(HierarchyTreeView sender)
		{
			List<long> tempItems = sender.GetVisibleItemsIds();
			if (!visibleItemsIds.SequenceEqual(tempItems))
			{
				visibleItemsIds = tempItems;
				reportViewModel.DataProvider.ProvideRecords(visibleItemsIds);
			}
		}


		private void TabControl_SelectionChanged(object sender, SelectionChangedEventArgs e)
		{
			TabControl tc = sender as TabControl;
			if (tc != null)
			{
				var selectedTabItem = tc.SelectedItem as TabItem;
				if (!(e.Source is TabControl) || e.Source != sender || selectedTabItem == null || reportViewModel.DataProvider == null)
				{
					return;
				}
				if (Equals(selectedTabItem, Node) && reportViewModel.DataProvider.ReportParameter.ReportType != ServiceProxies.EMSLoadFlowReportType.Node)
				{
					reportViewModel.DataProvider.ReportParameter.ReportType = ServiceProxies.EMSLoadFlowReportType.Node;
					reportViewModel.DataProvider.ReportParameter.HierarchyType = reportViewModel.HierarchyType;
					reportViewModel.DataProvider.ProvideRecords(visibleItemsIds);
				}
				else if (Equals(selectedTabItem, Section) && reportViewModel.DataProvider.ReportParameter.ReportType != ServiceProxies.EMSLoadFlowReportType.Section)
				{
					reportViewModel.DataProvider.ReportParameter.ReportType = ServiceProxies.EMSLoadFlowReportType.Section;
					reportViewModel.DataProvider.ReportParameter.HierarchyType = reportViewModel.HierarchyType;
					reportViewModel.DataProvider.ProvideRecords(visibleItemsIds);
				}
			}
		}




		public void Dispose()
		{
			reportViewModel.Dispose();
		}



        #endregion Methods

    }
}
