//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainModel PowerFunctionsReportDSLDomainModel
	/// Description for
	/// SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSL
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("6a145a5d-3ec1-4a73-ae06-63c45873e65a")]
	public partial class PowerFunctionsReportDSLDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// PowerFunctionsReportDSLDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0x6a145a5d, 0x3ec1, 0x4a73, 0xae, 0x06, 0x63, 0xc4, 0x58, 0x73, 0xe6, 0x5a);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public PowerFunctionsReportDSLDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
			// Call the partial method to allow any required serialization setup to be done.
			this.InitializeSerialization(store);		
		}
		
	
		///<Summary>
		/// Defines a partial method that will be called from the constructor to
		/// allow any necessary serialization setup to be done.
		///</Summary>
		///<remarks>
		/// For a DSL created with the DSL Designer wizard, an implementation of this 
		/// method will be generated in the GeneratedCode\SerializationHelper.cs class.
		///</remarks>
		partial void InitializeSerialization(DslModeling::Store store);
	
	
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(ModelRoot),
				typeof(Comment),
				typeof(ModelType),
				typeof(NamedElement),
				typeof(JMSModel),
				typeof(ClassModelElement),
				typeof(ClassAttribute),
				typeof(ModelClass),
				typeof(Enum),
				typeof(EnumAttribute),
				typeof(UIElement),
				typeof(Tab),
				typeof(UIElementAttributes),
				typeof(DataGrid),
				typeof(ColumnAttributes),
				typeof(TabAttributes),
				typeof(DataGridAttributes),
				typeof(ModelRootHasComments),
				typeof(CommentReferencesModelTyped),
				typeof(ModelRootHasTypes),
				typeof(JMSModelHasAttributes),
				typeof(Generalization),
				typeof(Association),
				typeof(UndirectionalAssociation),
				typeof(EnumHasValues),
				typeof(TabReferencesTargetTabbed),
				typeof(TabReferencesDataGrid),
				typeof(TabHasAttributes),
				typeof(DataGridHasAttributes),
				typeof(DataGridHasColumns),
				typeof(DataGridJMSViewModel),
				typeof(PowerFunctionsReportDSLDiagram),
				typeof(CommentConnector),
				typeof(GeneralizationConnector),
				typeof(AssociationConnector),
				typeof(UndirectionalConnector),
				typeof(UIConnector),
				typeof(TabConnector),
				typeof(ViewModelConnector),
				typeof(CommentShape),
				typeof(JMSModelShape),
				typeof(EnumShape),
				typeof(TabShape),
				typeof(UIElementShape),
				typeof(DataGridShape),
				typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.FixUpDiagram),
				typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.DecoratorPropertyChanged),
				typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.ConnectorRolePlayerChanged),
				typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.CompartmentItemAddRule),
				typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.CompartmentItemDeleteRule),
				typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.CompartmentItemRolePlayerChangeRule),
				typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.CompartmentItemRolePlayerPositionChangeRule),
				typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.CompartmentItemChangeRule),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(NamedElement), "Name", NamedElement.NameDomainPropertyId, typeof(NamedElement.NamePropertyHandler)),
				new DomainMemberInfo(typeof(NamedElement), "Alias", NamedElement.AliasDomainPropertyId, typeof(NamedElement.AliasPropertyHandler)),
				new DomainMemberInfo(typeof(JMSModel), "IsDataContract", JMSModel.IsDataContractDomainPropertyId, typeof(JMSModel.IsDataContractPropertyHandler)),
				new DomainMemberInfo(typeof(JMSModel), "HasDefaultConstructor", JMSModel.HasDefaultConstructorDomainPropertyId, typeof(JMSModel.HasDefaultConstructorPropertyHandler)),
				new DomainMemberInfo(typeof(JMSModel), "HasKnownTypes", JMSModel.HasKnownTypesDomainPropertyId, typeof(JMSModel.HasKnownTypesPropertyHandler)),
				new DomainMemberInfo(typeof(JMSModel), "FolderName", JMSModel.FolderNameDomainPropertyId, typeof(JMSModel.FolderNamePropertyHandler)),
				new DomainMemberInfo(typeof(ClassModelElement), "Description", ClassModelElement.DescriptionDomainPropertyId, typeof(ClassModelElement.DescriptionPropertyHandler)),
				new DomainMemberInfo(typeof(ClassAttribute), "InitialValue", ClassAttribute.InitialValueDomainPropertyId, typeof(ClassAttribute.InitialValuePropertyHandler)),
				new DomainMemberInfo(typeof(ClassAttribute), "Type", ClassAttribute.TypeDomainPropertyId, typeof(ClassAttribute.TypePropertyHandler)),
				new DomainMemberInfo(typeof(ClassAttribute), "AccessModifier", ClassAttribute.AccessModifierDomainPropertyId, typeof(ClassAttribute.AccessModifierPropertyHandler)),
				new DomainMemberInfo(typeof(ClassAttribute), "IsDataMember", ClassAttribute.IsDataMemberDomainPropertyId, typeof(ClassAttribute.IsDataMemberPropertyHandler)),
				new DomainMemberInfo(typeof(ClassAttribute), "ModelCode", ClassAttribute.ModelCodeDomainPropertyId, typeof(ClassAttribute.ModelCodePropertyHandler)),
				new DomainMemberInfo(typeof(ClassAttribute), "MeasurementType", ClassAttribute.MeasurementTypeDomainPropertyId, typeof(ClassAttribute.MeasurementTypePropertyHandler)),
				new DomainMemberInfo(typeof(ModelClass), "ShouldGenerate", ModelClass.ShouldGenerateDomainPropertyId, typeof(ModelClass.ShouldGeneratePropertyHandler)),
				new DomainMemberInfo(typeof(UIElement), "ShouldGenerate", UIElement.ShouldGenerateDomainPropertyId, typeof(UIElement.ShouldGeneratePropertyHandler)),
				new DomainMemberInfo(typeof(ColumnAttributes), "Binding", ColumnAttributes.BindingDomainPropertyId, typeof(ColumnAttributes.BindingPropertyHandler)),
				new DomainMemberInfo(typeof(Association), "SourceMultiplicity", Association.SourceMultiplicityDomainPropertyId, typeof(Association.SourceMultiplicityPropertyHandler)),
				new DomainMemberInfo(typeof(Association), "SourceRoleName", Association.SourceRoleNameDomainPropertyId, typeof(Association.SourceRoleNamePropertyHandler)),
				new DomainMemberInfo(typeof(Association), "TargetMultiplicity", Association.TargetMultiplicityDomainPropertyId, typeof(Association.TargetMultiplicityPropertyHandler)),
				new DomainMemberInfo(typeof(Association), "TargetRoleName", Association.TargetRoleNameDomainPropertyId, typeof(Association.TargetRoleNamePropertyHandler)),
				new DomainMemberInfo(typeof(Association), "AccessModifier", Association.AccessModifierDomainPropertyId, typeof(Association.AccessModifierPropertyHandler)),
				new DomainMemberInfo(typeof(Association), "IsDataMember", Association.IsDataMemberDomainPropertyId, typeof(Association.IsDataMemberPropertyHandler)),
				new DomainMemberInfo(typeof(Association), "Description", Association.DescriptionDomainPropertyId, typeof(Association.DescriptionPropertyHandler)),
				new DomainMemberInfo(typeof(Association), "ModelCode", Association.ModelCodeDomainPropertyId, typeof(Association.ModelCodePropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(ModelRootHasComments), "ModelRoot", ModelRootHasComments.ModelRootDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelRootHasComments), "Comment", ModelRootHasComments.CommentDomainRoleId),
				new DomainRolePlayerInfo(typeof(CommentReferencesModelTyped), "Comment", CommentReferencesModelTyped.CommentDomainRoleId),
				new DomainRolePlayerInfo(typeof(CommentReferencesModelTyped), "ModelType", CommentReferencesModelTyped.ModelTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelRootHasTypes), "ModelRoot", ModelRootHasTypes.ModelRootDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelRootHasTypes), "ModelType", ModelRootHasTypes.ModelTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(JMSModelHasAttributes), "JMSModel", JMSModelHasAttributes.JMSModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(JMSModelHasAttributes), "ClassAttribute", JMSModelHasAttributes.ClassAttributeDomainRoleId),
				new DomainRolePlayerInfo(typeof(Generalization), "Superclass", Generalization.SuperclassDomainRoleId),
				new DomainRolePlayerInfo(typeof(Generalization), "Subclasses", Generalization.SubclassesDomainRoleId),
				new DomainRolePlayerInfo(typeof(Association), "Source", Association.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(Association), "Target", Association.TargetDomainRoleId),
				new DomainRolePlayerInfo(typeof(UndirectionalAssociation), "JMSModel", UndirectionalAssociation.JMSModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(UndirectionalAssociation), "ModelClass", UndirectionalAssociation.ModelClassDomainRoleId),
				new DomainRolePlayerInfo(typeof(EnumHasValues), "Enum", EnumHasValues.EnumDomainRoleId),
				new DomainRolePlayerInfo(typeof(EnumHasValues), "EnumAttribute", EnumHasValues.EnumAttributeDomainRoleId),
				new DomainRolePlayerInfo(typeof(TabReferencesTargetTabbed), "SourceTab", TabReferencesTargetTabbed.SourceTabDomainRoleId),
				new DomainRolePlayerInfo(typeof(TabReferencesTargetTabbed), "TargetTab", TabReferencesTargetTabbed.TargetTabDomainRoleId),
				new DomainRolePlayerInfo(typeof(TabReferencesDataGrid), "Tab", TabReferencesDataGrid.TabDomainRoleId),
				new DomainRolePlayerInfo(typeof(TabReferencesDataGrid), "DataGrid", TabReferencesDataGrid.DataGridDomainRoleId),
				new DomainRolePlayerInfo(typeof(TabHasAttributes), "Tab", TabHasAttributes.TabDomainRoleId),
				new DomainRolePlayerInfo(typeof(TabHasAttributes), "TabAttributes", TabHasAttributes.TabAttributesDomainRoleId),
				new DomainRolePlayerInfo(typeof(DataGridHasAttributes), "DataGrid", DataGridHasAttributes.DataGridDomainRoleId),
				new DomainRolePlayerInfo(typeof(DataGridHasAttributes), "DataGridAttributes", DataGridHasAttributes.DataGridAttributesDomainRoleId),
				new DomainRolePlayerInfo(typeof(DataGridHasColumns), "DataGrid", DataGridHasColumns.DataGridDomainRoleId),
				new DomainRolePlayerInfo(typeof(DataGridHasColumns), "ColumnAttributes", DataGridHasColumns.ColumnAttributesDomainRoleId),
				new DomainRolePlayerInfo(typeof(DataGridJMSViewModel), "DataGrid", DataGridJMSViewModel.DataGridDomainRoleId),
				new DomainRolePlayerInfo(typeof(DataGridJMSViewModel), "JMSModel", DataGridJMSViewModel.JMSModelDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(31);
				createElementMap.Add(typeof(ModelRoot), 0);
				createElementMap.Add(typeof(Comment), 1);
				createElementMap.Add(typeof(NamedElement), 2);
				createElementMap.Add(typeof(JMSModel), 3);
				createElementMap.Add(typeof(ClassAttribute), 4);
				createElementMap.Add(typeof(Enum), 5);
				createElementMap.Add(typeof(EnumAttribute), 6);
				createElementMap.Add(typeof(Tab), 7);
				createElementMap.Add(typeof(DataGrid), 8);
				createElementMap.Add(typeof(ColumnAttributes), 9);
				createElementMap.Add(typeof(TabAttributes), 10);
				createElementMap.Add(typeof(DataGridAttributes), 11);
				createElementMap.Add(typeof(PowerFunctionsReportDSLDiagram), 12);
				createElementMap.Add(typeof(CommentConnector), 13);
				createElementMap.Add(typeof(GeneralizationConnector), 14);
				createElementMap.Add(typeof(UndirectionalConnector), 15);
				createElementMap.Add(typeof(TabConnector), 16);
				createElementMap.Add(typeof(ViewModelConnector), 17);
				createElementMap.Add(typeof(CommentShape), 18);
				createElementMap.Add(typeof(JMSModelShape), 19);
				createElementMap.Add(typeof(EnumShape), 20);
				createElementMap.Add(typeof(TabShape), 21);
				createElementMap.Add(typeof(DataGridShape), 22);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				case 0: return new ModelRoot(partition, propertyAssignments);
				case 1: return new Comment(partition, propertyAssignments);
				case 2: return new NamedElement(partition, propertyAssignments);
				case 3: return new JMSModel(partition, propertyAssignments);
				case 4: return new ClassAttribute(partition, propertyAssignments);
				case 5: return new Enum(partition, propertyAssignments);
				case 6: return new EnumAttribute(partition, propertyAssignments);
				case 7: return new Tab(partition, propertyAssignments);
				case 8: return new DataGrid(partition, propertyAssignments);
				case 9: return new ColumnAttributes(partition, propertyAssignments);
				case 10: return new TabAttributes(partition, propertyAssignments);
				case 11: return new DataGridAttributes(partition, propertyAssignments);
				case 12: return new PowerFunctionsReportDSLDiagram(partition, propertyAssignments);
				case 13: return new CommentConnector(partition, propertyAssignments);
				case 14: return new GeneralizationConnector(partition, propertyAssignments);
				case 15: return new UndirectionalConnector(partition, propertyAssignments);
				case 16: return new TabConnector(partition, propertyAssignments);
				case 17: return new ViewModelConnector(partition, propertyAssignments);
				case 18: return new CommentShape(partition, propertyAssignments);
				case 19: return new JMSModelShape(partition, propertyAssignments);
				case 20: return new EnumShape(partition, propertyAssignments);
				case 21: return new TabShape(partition, propertyAssignments);
				case 22: return new DataGridShape(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(14);
				createElementLinkMap.Add(typeof(ModelRootHasComments), 0);
				createElementLinkMap.Add(typeof(CommentReferencesModelTyped), 1);
				createElementLinkMap.Add(typeof(ModelRootHasTypes), 2);
				createElementLinkMap.Add(typeof(JMSModelHasAttributes), 3);
				createElementLinkMap.Add(typeof(Generalization), 4);
				createElementLinkMap.Add(typeof(Association), 5);
				createElementLinkMap.Add(typeof(UndirectionalAssociation), 6);
				createElementLinkMap.Add(typeof(EnumHasValues), 7);
				createElementLinkMap.Add(typeof(TabReferencesTargetTabbed), 8);
				createElementLinkMap.Add(typeof(TabReferencesDataGrid), 9);
				createElementLinkMap.Add(typeof(TabHasAttributes), 10);
				createElementLinkMap.Add(typeof(DataGridHasAttributes), 11);
				createElementLinkMap.Add(typeof(DataGridHasColumns), 12);
				createElementLinkMap.Add(typeof(DataGridJMSViewModel), 13);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new ModelRootHasComments(partition, roleAssignments, propertyAssignments);
				case 1: return new CommentReferencesModelTyped(partition, roleAssignments, propertyAssignments);
				case 2: return new ModelRootHasTypes(partition, roleAssignments, propertyAssignments);
				case 3: return new JMSModelHasAttributes(partition, roleAssignments, propertyAssignments);
				case 4: return new Generalization(partition, roleAssignments, propertyAssignments);
				case 5: return new Association(partition, roleAssignments, propertyAssignments);
				case 6: return new UndirectionalAssociation(partition, roleAssignments, propertyAssignments);
				case 7: return new EnumHasValues(partition, roleAssignments, propertyAssignments);
				case 8: return new TabReferencesTargetTabbed(partition, roleAssignments, propertyAssignments);
				case 9: return new TabReferencesDataGrid(partition, roleAssignments, propertyAssignments);
				case 10: return new TabHasAttributes(partition, roleAssignments, propertyAssignments);
				case 11: return new DataGridHasAttributes(partition, roleAssignments, propertyAssignments);
				case 12: return new DataGridHasColumns(partition, roleAssignments, propertyAssignments);
				case 13: return new DataGridJMSViewModel(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return PowerFunctionsReportDSLDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (PowerFunctionsReportDSLDomainModel.resourceManager == null)
				{
					PowerFunctionsReportDSLDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(PowerFunctionsReportDSLDomainModel).Assembly);
				}
				return PowerFunctionsReportDSLDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return PowerFunctionsReportDSLDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return PowerFunctionsReportDSLDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (PowerFunctionsReportDSLDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new PowerFunctionsReportDSLCopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					copyFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceCopyClosure());
					
					PowerFunctionsReportDSLDomainModel.copyClosure = copyFilter;
				}
				return PowerFunctionsReportDSLDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (PowerFunctionsReportDSLDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new PowerFunctionsReportDSLDeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
					removeFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceDeleteClosure());
		
					PowerFunctionsReportDSLDomainModel.removeClosure = removeFilter;
				}
				return PowerFunctionsReportDSLDomainModel.removeClosure;
			}
		}
		#endregion
		#region Diagram rule helpers
		/// <summary>
		/// Enables rules in this domain model related to diagram fixup for the given store.
		/// If diagram data will be loaded into the store, this method should be called first to ensure
		/// that the diagram behaves properly.
		/// </summary>
		public static void EnableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.EnableRule(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.FixUpDiagram));
			ruleManager.EnableRule(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.DecoratorPropertyChanged));
			ruleManager.EnableRule(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.ConnectorRolePlayerChanged));
			ruleManager.EnableRule(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.CompartmentItemAddRule));
			ruleManager.EnableRule(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.CompartmentItemDeleteRule));
			ruleManager.EnableRule(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.CompartmentItemRolePlayerChangeRule));
			ruleManager.EnableRule(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.CompartmentItemRolePlayerPositionChangeRule));
			ruleManager.EnableRule(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.CompartmentItemChangeRule));
		}
		
		/// <summary>
		/// Disables rules in this domain model related to diagram fixup for the given store.
		/// </summary>
		public static void DisableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.DisableRule(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.FixUpDiagram));
			ruleManager.DisableRule(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.DecoratorPropertyChanged));
			ruleManager.DisableRule(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.ConnectorRolePlayerChanged));
			ruleManager.DisableRule(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.CompartmentItemAddRule));
			ruleManager.DisableRule(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.CompartmentItemDeleteRule));
			ruleManager.DisableRule(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.CompartmentItemRolePlayerChangeRule));
			ruleManager.DisableRule(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.CompartmentItemRolePlayerPositionChangeRule));
			ruleManager.DisableRule(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.CompartmentItemChangeRule));
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class PowerFunctionsReportDSLDeleteClosure : PowerFunctionsReportDSLDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public PowerFunctionsReportDSLDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class PowerFunctionsReportDSLDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public PowerFunctionsReportDSLDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.CommentDomainRoleId, true);
			DomainRoles.Add(global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelTypeDomainRoleId, true);
			DomainRoles.Add(global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes.ClassAttributeDomainRoleId, true);
			DomainRoles.Add(global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues.EnumAttributeDomainRoleId, true);
			DomainRoles.Add(global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.TabAttributesDomainRoleId, true);
			DomainRoles.Add(global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.DataGridAttributesDomainRoleId, true);
			DomainRoles.Add(global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.ColumnAttributesDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class PowerFunctionsReportDSLCopyClosure : PowerFunctionsReportDSLCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public PowerFunctionsReportDSLCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class PowerFunctionsReportDSLCopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public PowerFunctionsReportDSLCopyClosureBase():base()
		{
		}
	}
	#endregion
		
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainEnumeration: Types
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Types
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum Types
	{
		/// <summary>
		/// Bool
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Types.Bool
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Types/Bool.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Bool,
		/// <summary>
		/// Float
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Types.Float
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Types/Float.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Float,
		/// <summary>
		/// GID
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Types.GID
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Types/GID.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		GID,
		/// <summary>
		/// Int
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Types.Int
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Types/Int.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Int,
		/// <summary>
		/// LID
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Types.LID
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Types/LID.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		LID,
		/// <summary>
		/// Long
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Types.Long
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Types/Long.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Long,
		/// <summary>
		/// Short
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Types.Short
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Types/Short.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Short,
		/// <summary>
		/// String
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Types.String
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Types/String.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		String,
		/// <summary>
		/// UInt
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Types.UInt
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Types/UInt.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		UInt,
		/// <summary>
		/// Byte
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Types.Byte
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Types/Byte.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Byte,
		/// <summary>
		/// Char
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Types.Char
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Types/Char.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Char,
		/// <summary>
		/// DateTime
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Types.DateTime
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Types/DateTime.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		DateTime,
		/// <summary>
		/// Double
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Types.Double
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Types/Double.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Double,
		/// <summary>
		/// UShort
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Types.UShort
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Types/UShort.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		UShort,
		/// <summary>
		/// ULong
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Types.ULong
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Types/ULong.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		ULong,
		/// <summary>
		/// ELimitViolation
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.Types.ELimitViolation
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Types/ELimitViolation.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		ELimitViolation,
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainEnumeration: TypeAccessModifier
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.TypeAccessModifier
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum TypeAccessModifier
	{
		/// <summary>
		/// Private
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.TypeAccessModifier.Private
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TypeAccessModifier/Private.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Private = 1,
		/// <summary>
		/// Public
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.TypeAccessModifier.Public
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TypeAccessModifier/Public.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Public = 0,
		/// <summary>
		/// Protected
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.TypeAccessModifier.Protected
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TypeAccessModifier/Protected.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Protected = 2,
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainEnumeration: Multiplicity
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Multiplicity
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum Multiplicity
	{
		/// <summary>
		/// One
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Multiplicity.One
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Multiplicity/One.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		One = 1,
		/// <summary>
		/// ZeroMany
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.Multiplicity.ZeroMany
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Multiplicity/ZeroMany.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		ZeroMany = 0,
		/// <summary>
		/// ZeroOne
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.Multiplicity.ZeroOne
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Multiplicity/ZeroOne.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		ZeroOne = 2,
		/// <summary>
		/// OneMany
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.Multiplicity.OneMany
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Multiplicity/OneMany.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		OneMany = 3,
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainEnumeration: JMSResultType
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.JMSResultType
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum JMSResultType
	{
		/// <summary>
		/// Record
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.JMSResultType.Record
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.JMSResultType/Record.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Record = 0,
		/// <summary>
		/// Job
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.JMSResultType.Job
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.JMSResultType/Job.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Job = 2,
		/// <summary>
		/// Results
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.JMSResultType.Results
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.JMSResultType/Results.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Results = 1,
		/// <summary>
		/// Bean
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.JMSResultType.Bean
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.JMSResultType/Bean.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Bean = 3,
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainEnumeration: ModelCodeTypes
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum ModelCodeTypes
	{
		/// <summary>
		/// Empty
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.Empty
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/Empty.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Empty = 0,
		/// <summary>
		/// Byte
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.Byte
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/Byte.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Byte = 2,
		/// <summary>
		/// Int32
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.Int32
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/Int32.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Int32 = 3,
		/// <summary>
		/// Int64
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.Int64
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/Int64.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Int64 = 4,
		/// <summary>
		/// Float
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.Float
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/Float.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Float = 5,
		/// <summary>
		/// Double
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.Double
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/Double.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Double = 6,
		/// <summary>
		/// String
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.String
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/String.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		String = 7,
		/// <summary>
		/// DateTime
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.DateTime
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/DateTime.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		DateTime = 8,
		/// <summary>
		/// Reference
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.Reference
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/Reference.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Reference = 9,
		/// <summary>
		/// Bool
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.Bool
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/Bool.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Bool = 1,
		/// <summary>
		/// Enum
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.Enum
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/Enum.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Enum = 10,
		/// <summary>
		/// Struct
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.Struct
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/Struct.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Struct = 11,
		/// <summary>
		/// TimeSpan
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.TimeSpan
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/TimeSpan.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		TimeSpan = 12,
		/// <summary>
		/// Complex
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.Complex
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/Complex.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Complex = 13,
		/// <summary>
		/// BoolVector
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.BoolVector
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/BoolVector.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		BoolVector = 17,
		/// <summary>
		/// DoubleVector
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.DoubleVector
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/DoubleVector.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		DoubleVector = 22,
		/// <summary>
		/// StringVector
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.StringVector
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/StringVector.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		StringVector = 23,
		/// <summary>
		/// DateTimeVector
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.DateTimeVector
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/DateTimeVector.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		DateTimeVector = 24,
		/// <summary>
		/// ReferenceVector
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.ReferenceVector
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/ReferenceVector.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		ReferenceVector = 25,
		/// <summary>
		/// EnumVector
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.EnumVector
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/EnumVector.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		EnumVector = 26,
		/// <summary>
		/// StructVector
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.StructVector
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/StructVector.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		StructVector = 27,
		/// <summary>
		/// TimeSpanVector
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.TimeSpanVector
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/TimeSpanVector.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		TimeSpanVector = 28,
		/// <summary>
		/// ComplexVector
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.ComplexVector
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/ComplexVector.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		ComplexVector = 29,
		/// <summary>
		/// ByteVector
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.ByteVector
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/ByteVector.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		ByteVector = 18,
		/// <summary>
		/// Int32Vector
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.Int32Vector
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/Int32Vector.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Int32Vector = 19,
		/// <summary>
		/// Int64Vector
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.Int64Vector
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/Int64Vector.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Int64Vector = 20,
		/// <summary>
		/// FloatVector
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.FloatVector
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/FloatVector.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		FloatVector = 21,
		/// <summary>
		/// BoolArray
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.BoolArray
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/BoolArray.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		BoolArray = 33,
		/// <summary>
		/// Int64Array
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.Int64Array
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/Int64Array.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Int64Array = 36,
		/// <summary>
		/// FloatArray
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.FloatArray
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/FloatArray.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		FloatArray = 37,
		/// <summary>
		/// DoubleArray
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.DoubleArray
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/DoubleArray.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		DoubleArray = 38,
		/// <summary>
		/// StringArray
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.StringArray
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/StringArray.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		StringArray = 39,
		/// <summary>
		/// DateTimeArray
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.DateTimeArray
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/DateTimeArray.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		DateTimeArray = 40,
		/// <summary>
		/// ReferenceArray
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.ReferenceArray
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/ReferenceArray.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		ReferenceArray = 41,
		/// <summary>
		/// EnumArray
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.EnumArray
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/EnumArray.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		EnumArray = 42,
		/// <summary>
		/// StructArray
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.StructArray
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/StructArray.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		StructArray = 43,
		/// <summary>
		/// ByteArray
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.ByteArray
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/ByteArray.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		ByteArray = 34,
		/// <summary>
		/// Int32Array
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.Int32Array
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/Int32Array.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Int32Array = 35,
		/// <summary>
		/// TimeSpanArray
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.TimeSpanArray
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/TimeSpanArray.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		TimeSpanArray = 44,
		/// <summary>
		/// ComplexArray
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes.ComplexArray
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelCodeTypes/ComplexArray.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		ComplexArray = 45,
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainEnumeration: MeasurementType
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum MeasurementType
	{
		/// <summary>
		/// Unitless
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType.Unitless
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType/Unitless.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Unitless = 0,
		/// <summary>
		/// Percent
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType.Percent
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType/Percent.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Percent = 27,
		/// <summary>
		/// RelativeVoltage
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType.RelativeVoltage
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType/RelativeVoltage.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		RelativeVoltage = 29,
		/// <summary>
		/// Voltage
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType.Voltage
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType/Voltage.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Voltage = 1,
		/// <summary>
		/// Temperature
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType.Temperature
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType/Temperature.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Temperature = 7,
		/// <summary>
		/// ActiveEnergy
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType.ActiveEnergy
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType/ActiveEnergy.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		ActiveEnergy = 8,
		/// <summary>
		/// ReactiveEnergy
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType.ReactiveEnergy
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType/ReactiveEnergy.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		ReactiveEnergy = 9,
		/// <summary>
		/// ApparentPower
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType.ApparentPower
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType/ApparentPower.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		ApparentPower = 10,
		/// <summary>
		/// VoltageAngle
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType.VoltageAngle
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType/VoltageAngle.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		VoltageAngle = 11,
		/// <summary>
		/// Status
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType.Status
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType/Status.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Status = 12,
		/// <summary>
		/// Impedance
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType.Impedance
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType/Impedance.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Impedance = 22,
		/// <summary>
		/// Admittance
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType.Admittance
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType/Admittance.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Admittance = 24,
		/// <summary>
		/// Current
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType.Current
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType/Current.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Current = 2,
		/// <summary>
		/// ActivePower
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType.ActivePower
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType/ActivePower.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		ActivePower = 3,
		/// <summary>
		/// ReactivePower
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType.ReactivePower
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType/ReactivePower.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		ReactivePower = 4,
		/// <summary>
		/// CosPhi
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType.CosPhi
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType/CosPhi.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		CosPhi = 5,
		/// <summary>
		/// Frequency
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType.Frequency
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType/Frequency.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		Frequency = 6,
		/// <summary>
		/// EMSApparentPowerM
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType.EMSApparentPowerM
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType/EMSApparentPowerM.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		EMSApparentPowerM = 39,
		/// <summary>
		/// EMSReactivePowerM
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType.EMSReactivePowerM
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType/EMSReactivePowerM.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		EMSReactivePowerM = 40,
		/// <summary>
		/// EMSActivePowerM
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType.EMSActivePowerM
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType/EMSActivePowerM.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		EMSActivePowerM = 41,
		/// <summary>
		/// None
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType.None
		/// </summary>
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.MeasurementType/None.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		None = 100,
	}
}

