//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using SchneiderElectricDMS.PowerFunctionsReportDSL.CustomCode.Converters;

namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainClass ModelRoot
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRoot.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRoot.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("aef2a647-767e-4030-baca-5460a0917757")]
	public partial class ModelRoot : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelRoot domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaef2a647, 0x767e, 0x4030, 0xba, 0xca, 0x54, 0x60, 0xa0, 0x91, 0x77, 0x57);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelRoot(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelRoot(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.ModelRoot
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region Types opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Types.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelRoot
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelType> Types
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType sourceModelType1 = sourceElement as global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType;
			if (sourceModelType1 != null)
			{
				// Create link for path ModelRootHasTypes.Types
				this.Types.Add(sourceModelType1);

				return;
			}
				
			global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment sourceComment2 = sourceElement as global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment;
			if (sourceComment2 != null)
			{
				// Create link for path ModelRootHasComments.Comments
				this.Comments.Add(sourceComment2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType sourceModelType1 = sourceElement as global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType;
			if (sourceModelType1 != null)
			{
				// Delete link for path ModelRootHasTypes.Types
				
				foreach (DslModeling::ElementLink link in global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.GetLinks((global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRoot)this, sourceModelType1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelRootDomainRoleId, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelTypeDomainRoleId);
				}

				return;
			}
				
			global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment sourceComment2 = sourceElement as global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment;
			if (sourceComment2 != null)
			{
				// Delete link for path ModelRootHasComments.Comments
				
				foreach (DslModeling::ElementLink link in global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.GetLinks((global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRoot)this, sourceComment2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.ModelRootDomainRoleId, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainClass Comment
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Comment
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Comment.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Comment.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a520ec55-a120-424f-a01d-898b3ec8ca2b")]
	public partial class Comment : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Comment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa520ec55, 0xa120, 0x424f, 0xa0, 0x1d, 0x89, 0x8b, 0x3e, 0xc8, 0xca, 0x2b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.Comment
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.CommentDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.CommentDomainRoleId, value);
			}
		}
		#endregion
		#region ModelTyped opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ModelTyped.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped.Comment
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelType> ModelTyped
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped.CommentDomainRoleId);
			}
		}
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainClass ModelType
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("421dbe66-9213-4276-bd83-ef0213135ba7")]
	public abstract partial class ModelType : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x421dbe66, 0x9213, 0x4276, 0xbd, 0x83, 0xef, 0x02, 0x13, 0x13, 0x5b, 0xa7);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ModelType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Commented opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Commented.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped.ModelType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Commented
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped.ModelTypeDomainRoleId);
			}
		}
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelType
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelTypeDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelTypeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainClass NamedElement
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.NamedElement
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.NamedElement.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.NamedElement.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("a212836d-9f43-4e78-8f88-00c2746927e5")]
	public partial class NamedElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NamedElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa212836d, 0x9f43, 0x4e78, 0x8f, 0x88, 0x00, 0xc2, 0x74, 0x69, 0x27, 0xe5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NamedElement(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NamedElement(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xd3fa6324, 0xeda0, 0x4d53, 0xa9, 0xd4, 0x24, 0xbc, 0xdc, 0x1c, 0xbc, 0xb6);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.NamedElement.Name
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.NamedElement/Name.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.NamedElement/Name.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("d3fa6324-eda0-4d53-a9d4-24bcdc1cbcb6")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Alias domain property code
		
		/// <summary>
		/// Alias domain property Id.
		/// </summary>
		public static readonly global::System.Guid AliasDomainPropertyId = new global::System.Guid(0xad15ec76, 0x7156, 0x4597, 0xb0, 0xb2, 0x85, 0xc3, 0xad, 0x76, 0xbb, 0x53);
		
		/// <summary>
		/// Storage for Alias
		/// </summary>
		private global::System.String aliasPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Alias domain property.
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.NamedElement.Alias
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.NamedElement/Alias.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.NamedElement/Alias.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ad15ec76-7156-4597-b0b2-85c3ad76bb53")]
		public global::System.String Alias
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return aliasPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AliasPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElement.Alias domain property.
		/// </summary>
		internal sealed partial class AliasPropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElement, global::System.String>
		{
			private AliasPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElement.Alias domain property value handler.
			/// </summary>
			public static readonly AliasPropertyHandler Instance = new AliasPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElement.Alias domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AliasDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.aliasPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.aliasPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainClass ModelElement
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.ModelElement
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelElement.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelElement.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("bf1070c6-59b9-4636-a65d-0ef5aa8713c4")]
	public abstract partial class ModelElement : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbf1070c6, 0x59b9, 0x4636, 0xa6, 0x5d, 0x0e, 0xf5, 0xaa, 0x87, 0x13, 0xc4);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ModelElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xda967192, 0xef02, 0x44c8, 0x8c, 0x96, 0x7e, 0x38, 0xfd, 0x4a, 0x43, 0xaa);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelElement.Description
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelElement/Description.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelElement/Description.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("da967192-ef02-44c8-8c96-7e38fd4a43aa")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelElement.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelElement, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelElement.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelElement.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainClass ModelAttribute
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.ModelAttribute
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelAttribute.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelAttribute.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("829a8092-5e51-41f1-bff5-977ee88c66a4")]
	public partial class ModelAttribute : ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelAttribute domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x829a8092, 0x5e51, 0x41f1, 0xbf, 0xf5, 0x97, 0x7e, 0xe8, 0x8c, 0x66, 0xa4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelAttribute(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelAttribute(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x2d411332, 0x72ca, 0x497e, 0x9b, 0x2e, 0x93, 0xbb, 0xa3, 0x03, 0x2d, 0x06);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private Types typePropertyStorage = Types.Float;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.ModelAttribute.Type
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelAttribute/Type.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelAttribute/Type.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Types.Float)]
		[DslModeling::DomainObjectId("2d411332-72ca-497e-9b2e-93bba3032d06")]
		public Types Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, Types>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Types GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, Types newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Types oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsDataMember domain property code
		
		/// <summary>
		/// IsDataMember domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsDataMemberDomainPropertyId = new global::System.Guid(0x9a5402cf, 0x296d, 0x429d, 0xb2, 0x8b, 0xd9, 0x59, 0x81, 0xfc, 0x04, 0x72);
		
		/// <summary>
		/// Storage for IsDataMember
		/// </summary>
		private global::System.Boolean isDataMemberPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsDataMember domain property.
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.ModelAttribute.Is
		/// Data Member
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelAttribute/IsDataMember.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelAttribute/IsDataMember.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("9a5402cf-296d-429d-b28b-d95981fc0472")]
		public global::System.Boolean IsDataMember
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isDataMemberPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsDataMemberPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.IsDataMember domain property.
		/// </summary>
		internal sealed partial class IsDataMemberPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Boolean>
		{
			private IsDataMemberPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.IsDataMember domain property value handler.
			/// </summary>
			public static readonly IsDataMemberPropertyHandler Instance = new IsDataMemberPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.IsDataMember domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsDataMemberDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isDataMemberPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isDataMemberPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelCode domain property code
		
		/// <summary>
		/// ModelCode domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModelCodeDomainPropertyId = new global::System.Guid(0xf6be6a7b, 0x5e44, 0x43f2, 0xab, 0x97, 0xc5, 0x6c, 0x95, 0x24, 0x2d, 0x17);
		
		/// <summary>
		/// Storage for ModelCode
		/// </summary>
		private global::System.String modelCodePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ModelCode domain property.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelAttribute.Model Code
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelAttribute/ModelCode.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelAttribute/ModelCode.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f6be6a7b-5e44-43f2-ab97-c56c95242d17")]
		public global::System.String ModelCode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modelCodePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModelCodePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.ModelCode domain property.
		/// </summary>
		internal sealed partial class ModelCodePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private ModelCodePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.ModelCode domain property value handler.
			/// </summary>
			public static readonly ModelCodePropertyHandler Instance = new ModelCodePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.ModelCode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModelCodeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modelCodePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modelCodePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MeasurementType domain property code
		
		/// <summary>
		/// MeasurementType domain property Id.
		/// </summary>
		public static readonly global::System.Guid MeasurementTypeDomainPropertyId = new global::System.Guid(0x386a150a, 0x60f2, 0x43dc, 0x93, 0xce, 0x62, 0x5a, 0x2f, 0x97, 0xe3, 0x7e);
		
		/// <summary>
		/// Storage for MeasurementType
		/// </summary>
		private MeasurementType measurementTypePropertyStorage = MeasurementType.None;
		
		/// <summary>
		/// Gets or sets the value of MeasurementType domain property.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelAttribute.Measurement Type
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelAttribute/MeasurementType.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelAttribute/MeasurementType.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(MeasurementType.None)]
		[DslModeling::DomainObjectId("386a150a-60f2-43dc-93ce-625a2f97e37e")]
		public MeasurementType MeasurementType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return measurementTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MeasurementTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.MeasurementType domain property.
		/// </summary>
		internal sealed partial class MeasurementTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, MeasurementType>
		{
			private MeasurementTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.MeasurementType domain property value handler.
			/// </summary>
			public static readonly MeasurementTypePropertyHandler Instance = new MeasurementTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.MeasurementType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MeasurementTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed MeasurementType GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.measurementTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, MeasurementType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				MeasurementType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.measurementTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainClass ModelClass
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.ModelClass
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelClass.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelClass.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8ddb44cf-3b06-4b91-b747-b1eec2bc30b4")]
	public abstract partial class ModelClass : ModelType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelClass domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8ddb44cf, 0x3b06, 0x4b91, 0xb7, 0x47, 0xb1, 0xee, 0xc2, 0xbc, 0x30, 0xb4);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ModelClass(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ShouldGenerate domain property code
		
		/// <summary>
		/// ShouldGenerate domain property Id.
		/// </summary>
		public static readonly global::System.Guid ShouldGenerateDomainPropertyId = new global::System.Guid(0x49e6db7c, 0xb6b1, 0x4cda, 0x8d, 0x31, 0xc5, 0xba, 0xd8, 0xb5, 0xa7, 0xc2);
		
		/// <summary>
		/// Storage for ShouldGenerate
		/// </summary>
		private global::System.Boolean shouldGeneratePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of ShouldGenerate domain property.
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.ModelClass.Should
		/// Generate
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelClass/ShouldGenerate.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelClass/ShouldGenerate.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("49e6db7c-b6b1-4cda-8d31-c5bad8b5a7c2")]
		public global::System.Boolean ShouldGenerate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return shouldGeneratePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ShouldGeneratePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.ShouldGenerate domain property.
		/// </summary>
		internal sealed partial class ShouldGeneratePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.Boolean>
		{
			private ShouldGeneratePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.ShouldGenerate domain property value handler.
			/// </summary>
			public static readonly ShouldGeneratePropertyHandler Instance = new ShouldGeneratePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.ShouldGenerate domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ShouldGenerateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.shouldGeneratePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.shouldGeneratePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainClass Enum
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Enum
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Enum.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Enum.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("cccc1a1d-067f-4adb-a360-85a9fb4f5b2b")]
	public partial class Enum : ModelClass
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Enum domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcccc1a1d, 0x067f, 0x4adb, 0xa3, 0x60, 0x85, 0xa9, 0xfb, 0x4f, 0x5b, 0x2b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Enum(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Enum(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Values opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Values.
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues.Enum
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EnumAttribute> Values
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EnumAttribute>, EnumAttribute>(global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues.EnumDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumAttribute.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumAttribute sourceEnumAttribute1 = sourceElement as global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumAttribute;
			if (sourceEnumAttribute1 != null)
			{
				// Create link for path EnumHasValues.Values
				this.Values.Add(sourceEnumAttribute1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumAttribute sourceEnumAttribute1 = sourceElement as global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumAttribute;
			if (sourceEnumAttribute1 != null)
			{
				// Delete link for path EnumHasValues.Values
				
				foreach (DslModeling::ElementLink link in global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues.GetLinks((global::SchneiderElectricDMS.PowerFunctionsReportDSL.Enum)this, sourceEnumAttribute1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues.EnumDomainRoleId, global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues.EnumAttributeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainClass EnumAttribute
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.EnumAttribute
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.EnumAttribute.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.EnumAttribute.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2cbf3442-ee61-4c37-b0c7-44b126765931")]
	public partial class EnumAttribute : ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EnumAttribute domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2cbf3442, 0xee61, 0x4c37, 0xb0, 0xc7, 0x44, 0xb1, 0x26, 0x76, 0x59, 0x31);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnumAttribute(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnumAttribute(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Enum opposite domain role accessor
		/// <summary>
		/// Gets or sets Enum.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues.EnumAttribute
		/// </summary>
		public virtual Enum Enum
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues.EnumAttributeDomainRoleId) as Enum;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues.EnumAttributeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainClass UIElement
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.UIElement
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.UIElement.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.UIElement.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("66aabeac-09c2-4ce5-9322-96b3248a8383")]
	public abstract partial class UIElement : ModelType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// UIElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x66aabeac, 0x09c2, 0x4ce5, 0x93, 0x22, 0x96, 0xb3, 0x24, 0x8a, 0x83, 0x83);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected UIElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ShouldGenerate domain property code
		
		/// <summary>
		/// ShouldGenerate domain property Id.
		/// </summary>
		public static readonly global::System.Guid ShouldGenerateDomainPropertyId = new global::System.Guid(0xbda40396, 0x0863, 0x4f18, 0xae, 0x95, 0x01, 0x9c, 0xce, 0xcc, 0x52, 0x13);
		
		/// <summary>
		/// Storage for ShouldGenerate
		/// </summary>
		private global::System.Boolean shouldGeneratePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of ShouldGenerate domain property.
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.UIElement.Should
		/// Generate
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.UIElement/ShouldGenerate.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.UIElement/ShouldGenerate.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("bda40396-0863-4f18-ae95-019ccecc5213")]
		public global::System.Boolean ShouldGenerate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return shouldGeneratePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ShouldGeneratePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the UIElement.ShouldGenerate domain property.
		/// </summary>
		internal sealed partial class ShouldGeneratePropertyHandler : DslModeling::DomainPropertyValueHandler<UIElement, global::System.Boolean>
		{
			private ShouldGeneratePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the UIElement.ShouldGenerate domain property value handler.
			/// </summary>
			public static readonly ShouldGeneratePropertyHandler Instance = new ShouldGeneratePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the UIElement.ShouldGenerate domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ShouldGenerateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(UIElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.shouldGeneratePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(UIElement element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.shouldGeneratePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainClass Tab
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Tab
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Tab.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Tab.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("122c8e33-a382-4cd3-9f1c-1de20c059896")]
	public partial class Tab : UIElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Tab domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x122c8e33, 0xa382, 0x4cd3, 0x9f, 0x1c, 0x1d, 0xe2, 0x0c, 0x05, 0x98, 0x96);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Tab(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Tab(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Header domain property code
		
		/// <summary>
		/// Header domain property Id.
		/// </summary>
		public static readonly global::System.Guid HeaderDomainPropertyId = new global::System.Guid(0xd1af7d4c, 0x32ea, 0x486c, 0x93, 0x31, 0xc6, 0x43, 0xf2, 0xd9, 0x0e, 0xb5);
		
		/// <summary>
		/// Storage for Header
		/// </summary>
		private global::System.String headerPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Header domain property.
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Tab.Header
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Tab/Header.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Tab/Header.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d1af7d4c-32ea-486c-9331-c643f2d90eb5")]
		public global::System.String Header
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return headerPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				HeaderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Tab.Header domain property.
		/// </summary>
		internal sealed partial class HeaderPropertyHandler : DslModeling::DomainPropertyValueHandler<Tab, global::System.String>
		{
			private HeaderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Tab.Header domain property value handler.
			/// </summary>
			public static readonly HeaderPropertyHandler Instance = new HeaderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Tab.Header domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return HeaderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Tab element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.headerPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Tab element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.headerPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetTabbed opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetTabbed.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed.SourceTab
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Tab> TargetTabbed
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Tab>, Tab>(global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed.SourceTabDomainRoleId);
			}
		}
		#endregion
		#region SourceTabbed opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceTabbed.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed.TargetTab
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Tab> SourceTabbed
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Tab>, Tab>(global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed.TargetTabDomainRoleId);
			}
		}
		#endregion
		#region DataGrid opposite domain role accessor
		/// <summary>
		/// Gets or sets DataGrid.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid.Tab
		/// </summary>
		public virtual DataGrid DataGrid
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid.TabDomainRoleId) as DataGrid;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid.TabDomainRoleId, value);
			}
		}
		#endregion
		#region Attributes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Attributes.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.Tab
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<TabAttribute> Attributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<TabAttribute>, TabAttribute>(global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.TabDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabAttribute.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabAttribute sourceTabAttribute1 = sourceElement as global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabAttribute;
			if (sourceTabAttribute1 != null)
			{
				// Create link for path TabHasAttributes.Attributes
				this.Attributes.Add(sourceTabAttribute1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabAttribute sourceTabAttribute1 = sourceElement as global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabAttribute;
			if (sourceTabAttribute1 != null)
			{
				// Delete link for path TabHasAttributes.Attributes
				
				foreach (DslModeling::ElementLink link in global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.GetLinks((global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab)this, sourceTabAttribute1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.TabDomainRoleId, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.TabAttributeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainClass UIElementAttribute
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.UIElementAttribute
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.UIElementAttribute.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.UIElementAttribute.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("dbbae87e-0a21-474c-8c31-dcaf405fb63c")]
	public abstract partial class UIElementAttribute : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// UIElementAttribute domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdbbae87e, 0x0a21, 0x474c, 0x8c, 0x31, 0xdc, 0xaf, 0x40, 0x5f, 0xb6, 0x3c);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected UIElementAttribute(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainClass DataGrid
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b78be496-b7e6-4883-84f6-7a38cd6a9680")]
	public partial class DataGrid : UIElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DataGrid domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb78be496, 0xb7e6, 0x4883, 0x84, 0xf6, 0x7a, 0x38, 0xcd, 0x6a, 0x96, 0x80);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataGrid(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataGrid(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ModelCodeResultsType domain property code
		
		/// <summary>
		/// ModelCodeResultsType domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModelCodeResultsTypeDomainPropertyId = new global::System.Guid(0x6e159ea2, 0x1ae9, 0x4823, 0xbc, 0xed, 0x69, 0x0a, 0x90, 0x60, 0xe4, 0xa6);
		
		/// <summary>
		/// Storage for ModelCodeResultsType
		/// </summary>
		private global::System.String modelCodeResultsTypePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ModelCodeResultsType domain property.
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid.Model Code
		/// Results Type
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid/ModelCodeResultsType.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid/ModelCodeResultsType.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6e159ea2-1ae9-4823-bced-690a9060e4a6")]
		public global::System.String ModelCodeResultsType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modelCodeResultsTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModelCodeResultsTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DataGrid.ModelCodeResultsType domain property.
		/// </summary>
		internal sealed partial class ModelCodeResultsTypePropertyHandler : DslModeling::DomainPropertyValueHandler<DataGrid, global::System.String>
		{
			private ModelCodeResultsTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DataGrid.ModelCodeResultsType domain property value handler.
			/// </summary>
			public static readonly ModelCodeResultsTypePropertyHandler Instance = new ModelCodeResultsTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DataGrid.ModelCodeResultsType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModelCodeResultsTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DataGrid element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modelCodeResultsTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DataGrid element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modelCodeResultsTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DMSType domain property code
		
		/// <summary>
		/// DMSType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DMSTypeDomainPropertyId = new global::System.Guid(0x55de2092, 0x8e08, 0x4e3f, 0xa1, 0xcc, 0x49, 0x0b, 0x79, 0x24, 0x56, 0xf9);
		
		/// <summary>
		/// Storage for DMSType
		/// </summary>
		private global::System.String dMSTypePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DMSType domain property.
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid.DMS Type
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid/DMSType.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid/DMSType.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("55de2092-8e08-4e3f-a1cc-490b792456f9")]
		public global::System.String DMSType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dMSTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DMSTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DataGrid.DMSType domain property.
		/// </summary>
		internal sealed partial class DMSTypePropertyHandler : DslModeling::DomainPropertyValueHandler<DataGrid, global::System.String>
		{
			private DMSTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DataGrid.DMSType domain property value handler.
			/// </summary>
			public static readonly DMSTypePropertyHandler Instance = new DMSTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DataGrid.DMSType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DMSTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DataGrid element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dMSTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DataGrid element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dMSTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Tab opposite domain role accessor
		/// <summary>
		/// Gets or sets Tab.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid.DataGrid
		/// </summary>
		public virtual Tab Tab
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid.DataGridDomainRoleId) as Tab;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid.DataGridDomainRoleId, value);
			}
		}
		#endregion
		#region Attributes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Attributes.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.DataGrid
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DataGridAttribute> Attributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DataGridAttribute>, DataGridAttribute>(global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.DataGridDomainRoleId);
			}
		}
		#endregion
		#region Columns opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Columns.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.DataGrid
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ColumnAttribute> Columns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ColumnAttribute>, ColumnAttribute>(global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.DataGridDomainRoleId);
			}
		}
		#endregion
		#region SuperHeaders opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SuperHeaders.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders.DataGrid
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DataGridSuperHeader> SuperHeaders
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DataGridSuperHeader>, DataGridSuperHeader>(global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders.DataGridDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridAttribute.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridSuperHeader.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridAttribute sourceDataGridAttribute1 = sourceElement as global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridAttribute;
			if (sourceDataGridAttribute1 != null)
			{
				// Create link for path DataGridHasAttributes.Attributes
				this.Attributes.Add(sourceDataGridAttribute1);

				return;
			}
				
			global::SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute sourceColumnAttribute2 = sourceElement as global::SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute;
			if (sourceColumnAttribute2 != null)
			{
				// Create link for path DataGridHasColumns.Columns
				this.Columns.Add(sourceColumnAttribute2);

				return;
			}
				
			global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridSuperHeader sourceDataGridSuperHeader3 = sourceElement as global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridSuperHeader;
			if (sourceDataGridSuperHeader3 != null)
			{
				// Create link for path DataGridHasSuperHeaders.SuperHeaders
				this.SuperHeaders.Add(sourceDataGridSuperHeader3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridAttribute sourceDataGridAttribute1 = sourceElement as global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridAttribute;
			if (sourceDataGridAttribute1 != null)
			{
				// Delete link for path DataGridHasAttributes.Attributes
				
				foreach (DslModeling::ElementLink link in global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.GetLinks((global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid)this, sourceDataGridAttribute1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.DataGridDomainRoleId, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.DataGridAttributeDomainRoleId);
				}

				return;
			}
				
			global::SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute sourceColumnAttribute2 = sourceElement as global::SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute;
			if (sourceColumnAttribute2 != null)
			{
				// Delete link for path DataGridHasColumns.Columns
				
				foreach (DslModeling::ElementLink link in global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.GetLinks((global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid)this, sourceColumnAttribute2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.DataGridDomainRoleId, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.ColumnAttributeDomainRoleId);
				}

				return;
			}
				
			global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridSuperHeader sourceDataGridSuperHeader3 = sourceElement as global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridSuperHeader;
			if (sourceDataGridSuperHeader3 != null)
			{
				// Delete link for path DataGridHasSuperHeaders.SuperHeaders
				
				foreach (DslModeling::ElementLink link in global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders.GetLinks((global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid)this, sourceDataGridSuperHeader3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders.DataGridDomainRoleId, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders.DataGridSuperHeaderDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainClass ColumnAttribute
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("cf1c89dc-fb64-49d8-acaf-5fcf1fa77925")]
	public partial class ColumnAttribute : UIElementAttribute
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ColumnAttribute domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcf1c89dc, 0xfb64, 0x49d8, 0xac, 0xaf, 0x5f, 0xcf, 0x1f, 0xa7, 0x79, 0x25);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ColumnAttribute(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ColumnAttribute(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region BindingName domain property code
		
		/// <summary>
		/// BindingName domain property Id.
		/// </summary>
		public static readonly global::System.Guid BindingNameDomainPropertyId = new global::System.Guid(0xd48555ac, 0x48a2, 0x4fe7, 0xba, 0xf0, 0xb3, 0xac, 0x93, 0xd9, 0xcc, 0xff);
		
		/// <summary>
		/// Storage for BindingName
		/// </summary>
		private global::System.String bindingNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of BindingName domain property.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute.Binding Name
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute/BindingName.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute/BindingName.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d48555ac-48a2-4fe7-baf0-b3ac93d9ccff")]
		public global::System.String BindingName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return bindingNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				BindingNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ColumnAttribute.BindingName domain property.
		/// </summary>
		internal sealed partial class BindingNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ColumnAttribute, global::System.String>
		{
			private BindingNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ColumnAttribute.BindingName domain property value handler.
			/// </summary>
			public static readonly BindingNamePropertyHandler Instance = new BindingNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ColumnAttribute.BindingName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return BindingNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ColumnAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.bindingNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ColumnAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.bindingNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Width domain property code
		
		/// <summary>
		/// Width domain property Id.
		/// </summary>
		public static readonly global::System.Guid WidthDomainPropertyId = new global::System.Guid(0xfe3e5722, 0x61fb, 0x4a50, 0x84, 0xf1, 0xfd, 0xe2, 0x23, 0x28, 0xb0, 0xa7);
		
		/// <summary>
		/// Storage for Width
		/// </summary>
		private global::System.String widthPropertyStorage = "100";
		
		/// <summary>
		/// Gets or sets the value of Width domain property.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute.Width
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute/Width.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute/Width.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("100")]
		[DslModeling::DomainObjectId("fe3e5722-61fb-4a50-84f1-fde22328b0a7")]
		public global::System.String Width
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return widthPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				WidthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ColumnAttribute.Width domain property.
		/// </summary>
		internal sealed partial class WidthPropertyHandler : DslModeling::DomainPropertyValueHandler<ColumnAttribute, global::System.String>
		{
			private WidthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ColumnAttribute.Width domain property value handler.
			/// </summary>
			public static readonly WidthPropertyHandler Instance = new WidthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ColumnAttribute.Width domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return WidthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ColumnAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.widthPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ColumnAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.widthPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region VerticalAlignment domain property code
		
		/// <summary>
		/// VerticalAlignment domain property Id.
		/// </summary>
		public static readonly global::System.Guid VerticalAlignmentDomainPropertyId = new global::System.Guid(0xf1dc6219, 0x44cf, 0x4f11, 0x99, 0xee, 0x45, 0x7a, 0x24, 0x1e, 0x9d, 0xb3);
		
		/// <summary>
		/// Storage for VerticalAlignment
		/// </summary>
		private VerticalAlignment verticalAlignmentPropertyStorage = VerticalAlignment.Center;
		
		/// <summary>
		/// Gets or sets the value of VerticalAlignment domain property.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute.Vertical Alignment
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute/VerticalAlignment.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute/VerticalAlignment.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(VerticalAlignment.Center)]
		[DslModeling::DomainObjectId("f1dc6219-44cf-4f11-99ee-457a241e9db3")]
		public VerticalAlignment VerticalAlignment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return verticalAlignmentPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				VerticalAlignmentPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ColumnAttribute.VerticalAlignment domain property.
		/// </summary>
		internal sealed partial class VerticalAlignmentPropertyHandler : DslModeling::DomainPropertyValueHandler<ColumnAttribute, VerticalAlignment>
		{
			private VerticalAlignmentPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ColumnAttribute.VerticalAlignment domain property value handler.
			/// </summary>
			public static readonly VerticalAlignmentPropertyHandler Instance = new VerticalAlignmentPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ColumnAttribute.VerticalAlignment domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VerticalAlignmentDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed VerticalAlignment GetValue(ColumnAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.verticalAlignmentPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ColumnAttribute element, VerticalAlignment newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				VerticalAlignment oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.verticalAlignmentPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region HorizontalAlignment domain property code
		
		/// <summary>
		/// HorizontalAlignment domain property Id.
		/// </summary>
		public static readonly global::System.Guid HorizontalAlignmentDomainPropertyId = new global::System.Guid(0x17d00c37, 0xce41, 0x4d57, 0xb5, 0x62, 0x35, 0xcf, 0x5e, 0xa0, 0xf4, 0xff);
		
		/// <summary>
		/// Storage for HorizontalAlignment
		/// </summary>
		private HorizontalAlignment horizontalAlignmentPropertyStorage = HorizontalAlignment.Right;
		
		/// <summary>
		/// Gets or sets the value of HorizontalAlignment domain property.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute.Horizontal
		/// Alignment
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute/HorizontalAlignment.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute/HorizontalAlignment.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(HorizontalAlignment.Right)]
		[DslModeling::DomainObjectId("17d00c37-ce41-4d57-b562-35cf5ea0f4ff")]
		public HorizontalAlignment HorizontalAlignment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return horizontalAlignmentPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				HorizontalAlignmentPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ColumnAttribute.HorizontalAlignment domain property.
		/// </summary>
		internal sealed partial class HorizontalAlignmentPropertyHandler : DslModeling::DomainPropertyValueHandler<ColumnAttribute, HorizontalAlignment>
		{
			private HorizontalAlignmentPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ColumnAttribute.HorizontalAlignment domain property value handler.
			/// </summary>
			public static readonly HorizontalAlignmentPropertyHandler Instance = new HorizontalAlignmentPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ColumnAttribute.HorizontalAlignment domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return HorizontalAlignmentDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed HorizontalAlignment GetValue(ColumnAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.horizontalAlignmentPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ColumnAttribute element, HorizontalAlignment newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				HorizontalAlignment oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.horizontalAlignmentPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Header domain property code
		
		/// <summary>
		/// Header domain property Id.
		/// </summary>
		public static readonly global::System.Guid HeaderDomainPropertyId = new global::System.Guid(0x2af382ef, 0x1bf9, 0x4cf9, 0xa5, 0x27, 0xf6, 0x96, 0xc5, 0x6c, 0xab, 0x9e);
		
		/// <summary>
		/// Storage for Header
		/// </summary>
		private global::System.String headerPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Header domain property.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute.Header
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute/Header.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute/Header.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2af382ef-1bf9-4cf9-a527-f696c56cab9e")]
		public global::System.String Header
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return headerPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				HeaderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ColumnAttribute.Header domain property.
		/// </summary>
		internal sealed partial class HeaderPropertyHandler : DslModeling::DomainPropertyValueHandler<ColumnAttribute, global::System.String>
		{
			private HeaderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ColumnAttribute.Header domain property value handler.
			/// </summary>
			public static readonly HeaderPropertyHandler Instance = new HeaderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ColumnAttribute.Header domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return HeaderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ColumnAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.headerPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ColumnAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.headerPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0xae1f8fc3, 0x944f, 0x4a53, 0xb4, 0xba, 0x2f, 0xa3, 0xd2, 0xba, 0x2e, 0xf8);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::System.String typePropertyStorage = "Float";
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute.Type
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute/Type.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute/Type.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Float")]
		[DslModeling::DomainObjectId("ae1f8fc3-944f-4a53-b4ba-2fa3d2ba2ef8")]
		[System.ComponentModel.TypeConverter(typeof(CustomTypeConverter))]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ColumnAttribute.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<ColumnAttribute, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ColumnAttribute.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ColumnAttribute.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ColumnAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ColumnAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsDataMember domain property code
		
		/// <summary>
		/// IsDataMember domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsDataMemberDomainPropertyId = new global::System.Guid(0x0f447f47, 0xe1d3, 0x4182, 0xa5, 0x96, 0xfb, 0x88, 0xc6, 0x1c, 0xa2, 0xea);
		
		/// <summary>
		/// Storage for IsDataMember
		/// </summary>
		private global::System.Boolean isDataMemberPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsDataMember domain property.
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute.Is
		/// Data Member
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute/IsDataMember.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute/IsDataMember.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("0f447f47-e1d3-4182-a596-fb88c61ca2ea")]
		public global::System.Boolean IsDataMember
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isDataMemberPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsDataMemberPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ColumnAttribute.IsDataMember domain property.
		/// </summary>
		internal sealed partial class IsDataMemberPropertyHandler : DslModeling::DomainPropertyValueHandler<ColumnAttribute, global::System.Boolean>
		{
			private IsDataMemberPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ColumnAttribute.IsDataMember domain property value handler.
			/// </summary>
			public static readonly IsDataMemberPropertyHandler Instance = new IsDataMemberPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ColumnAttribute.IsDataMember domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsDataMemberDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ColumnAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isDataMemberPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ColumnAttribute element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isDataMemberPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelCode domain property code
		
		/// <summary>
		/// ModelCode domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModelCodeDomainPropertyId = new global::System.Guid(0x2fa0e2a4, 0x2d4b, 0x4a7c, 0xb0, 0x54, 0x65, 0x94, 0x15, 0x26, 0x20, 0x31);
		
		/// <summary>
		/// Storage for ModelCode
		/// </summary>
		private global::System.String modelCodePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ModelCode domain property.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute.Model Code
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute/ModelCode.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute/ModelCode.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2fa0e2a4-2d4b-4a7c-b054-659415262031")]
		public global::System.String ModelCode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modelCodePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModelCodePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ColumnAttribute.ModelCode domain property.
		/// </summary>
		internal sealed partial class ModelCodePropertyHandler : DslModeling::DomainPropertyValueHandler<ColumnAttribute, global::System.String>
		{
			private ModelCodePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ColumnAttribute.ModelCode domain property value handler.
			/// </summary>
			public static readonly ModelCodePropertyHandler Instance = new ModelCodePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ColumnAttribute.ModelCode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModelCodeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ColumnAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modelCodePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ColumnAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modelCodePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MeasurementType domain property code
		
		/// <summary>
		/// MeasurementType domain property Id.
		/// </summary>
		public static readonly global::System.Guid MeasurementTypeDomainPropertyId = new global::System.Guid(0xa883dc8f, 0x4fd4, 0x48e4, 0xb4, 0x84, 0xcb, 0x12, 0xe3, 0x5d, 0x0f, 0xd2);
		
		/// <summary>
		/// Storage for MeasurementType
		/// </summary>
		private MeasurementType measurementTypePropertyStorage = MeasurementType.None;
		
		/// <summary>
		/// Gets or sets the value of MeasurementType domain property.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute.Measurement Type
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute/MeasurementType.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute/MeasurementType.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(MeasurementType.None)]
		[DslModeling::DomainObjectId("a883dc8f-4fd4-48e4-b484-cb12e35d0fd2")]
		public MeasurementType MeasurementType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return measurementTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MeasurementTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ColumnAttribute.MeasurementType domain property.
		/// </summary>
		internal sealed partial class MeasurementTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ColumnAttribute, MeasurementType>
		{
			private MeasurementTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ColumnAttribute.MeasurementType domain property value handler.
			/// </summary>
			public static readonly MeasurementTypePropertyHandler Instance = new MeasurementTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ColumnAttribute.MeasurementType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MeasurementTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed MeasurementType GetValue(ColumnAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.measurementTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ColumnAttribute element, MeasurementType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				MeasurementType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.measurementTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ShouldGenerate domain property code
		
		/// <summary>
		/// ShouldGenerate domain property Id.
		/// </summary>
		public static readonly global::System.Guid ShouldGenerateDomainPropertyId = new global::System.Guid(0x81b85424, 0xb7f8, 0x4d42, 0xbe, 0x67, 0x08, 0xc9, 0xf4, 0x6e, 0x7b, 0x05);
		
		/// <summary>
		/// Storage for ShouldGenerate
		/// </summary>
		private global::System.Boolean shouldGeneratePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of ShouldGenerate domain property.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute.Should Generate
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute/ShouldGenerate.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute/ShouldGenerate.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("81b85424-b7f8-4d42-be67-08c9f46e7b05")]
		public global::System.Boolean ShouldGenerate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return shouldGeneratePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ShouldGeneratePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ColumnAttribute.ShouldGenerate domain property.
		/// </summary>
		internal sealed partial class ShouldGeneratePropertyHandler : DslModeling::DomainPropertyValueHandler<ColumnAttribute, global::System.Boolean>
		{
			private ShouldGeneratePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ColumnAttribute.ShouldGenerate domain property value handler.
			/// </summary>
			public static readonly ShouldGeneratePropertyHandler Instance = new ShouldGeneratePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ColumnAttribute.ShouldGenerate domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ShouldGenerateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ColumnAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.shouldGeneratePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ColumnAttribute element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.shouldGeneratePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DataGrid opposite domain role accessor
		/// <summary>
		/// Gets or sets DataGrid.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.ColumnAttribute
		/// </summary>
		public virtual DataGrid DataGrid
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.ColumnAttributeDomainRoleId) as DataGrid;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.ColumnAttributeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainClass TabAttribute
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.TabAttribute
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabAttribute.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabAttribute.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("370bf9b5-4a84-4deb-8eab-9267ce36c6d2")]
	public partial class TabAttribute : UIElementAttribute
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TabAttribute domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x370bf9b5, 0x4a84, 0x4deb, 0x8e, 0xab, 0x92, 0x67, 0xce, 0x36, 0xc6, 0xd2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TabAttribute(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TabAttribute(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Tab opposite domain role accessor
		/// <summary>
		/// Gets or sets Tab.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.TabAttribute
		/// </summary>
		public virtual Tab Tab
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.TabAttributeDomainRoleId) as Tab;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.TabAttributeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainClass DataGridAttribute
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridAttribute
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridAttribute.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridAttribute.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c6c0e26a-2576-4220-8bb8-a997c3eb8320")]
	public partial class DataGridAttribute : UIElementAttribute
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DataGridAttribute domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc6c0e26a, 0x2576, 0x4220, 0x8b, 0xb8, 0xa9, 0x97, 0xc3, 0xeb, 0x83, 0x20);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataGridAttribute(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataGridAttribute(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DataGrid opposite domain role accessor
		/// <summary>
		/// Gets or sets DataGrid.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.DataGridAttribute
		/// </summary>
		public virtual DataGrid DataGrid
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.DataGridAttributeDomainRoleId) as DataGrid;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.DataGridAttributeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainClass DataGridSuperHeader
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridSuperHeader
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridSuperHeader.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridSuperHeader.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0223f388-4897-4077-a19d-b0a577a4aa5f")]
	public partial class DataGridSuperHeader : UIElementAttribute
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DataGridSuperHeader domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0223f388, 0x4897, 0x4077, 0xa1, 0x9d, 0xb0, 0xa5, 0x77, 0xa4, 0xaa, 0x5f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataGridSuperHeader(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataGridSuperHeader(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Column domain property code
		
		/// <summary>
		/// Column domain property Id.
		/// </summary>
		public static readonly global::System.Guid ColumnDomainPropertyId = new global::System.Guid(0x006a2db1, 0xcfb1, 0x424f, 0x9d, 0x95, 0xa2, 0x82, 0x1a, 0x75, 0x6a, 0x9b);
		
		/// <summary>
		/// Storage for Column
		/// </summary>
		private global::System.String columnPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Column domain property.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridSuperHeader.Column
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridSuperHeader/Column.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridSuperHeader/Column.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("006a2db1-cfb1-424f-9d95-a2821a756a9b")]
		[System.ComponentModel.TypeConverter(typeof(DataGridSuperHeaderColumnConverter))]

		public global::System.String Column
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return columnPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ColumnPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DataGridSuperHeader.Column domain property.
		/// </summary>
		internal sealed partial class ColumnPropertyHandler : DslModeling::DomainPropertyValueHandler<DataGridSuperHeader, global::System.String>
		{
			private ColumnPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DataGridSuperHeader.Column domain property value handler.
			/// </summary>
			public static readonly ColumnPropertyHandler Instance = new ColumnPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DataGridSuperHeader.Column domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ColumnDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DataGridSuperHeader element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.columnPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DataGridSuperHeader element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.columnPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ColumnSpan domain property code
		
		/// <summary>
		/// ColumnSpan domain property Id.
		/// </summary>
		public static readonly global::System.Guid ColumnSpanDomainPropertyId = new global::System.Guid(0x99516692, 0x0f9d, 0x438a, 0x94, 0xec, 0x50, 0x98, 0x71, 0xa3, 0xf9, 0x9d);
		
		/// <summary>
		/// Storage for ColumnSpan
		/// </summary>
		private global::System.String columnSpanPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ColumnSpan domain property.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridSuperHeader.Column Span
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridSuperHeader/ColumnSpan.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridSuperHeader/ColumnSpan.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("99516692-0f9d-438a-94ec-509871a3f99d")]
		public global::System.String ColumnSpan
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return columnSpanPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ColumnSpanPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DataGridSuperHeader.ColumnSpan domain property.
		/// </summary>
		internal sealed partial class ColumnSpanPropertyHandler : DslModeling::DomainPropertyValueHandler<DataGridSuperHeader, global::System.String>
		{
			private ColumnSpanPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DataGridSuperHeader.ColumnSpan domain property value handler.
			/// </summary>
			public static readonly ColumnSpanPropertyHandler Instance = new ColumnSpanPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DataGridSuperHeader.ColumnSpan domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ColumnSpanDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DataGridSuperHeader element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.columnSpanPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DataGridSuperHeader element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.columnSpanPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0xc6ddd689, 0x69ab, 0x43f5, 0xba, 0x3d, 0xd0, 0xcd, 0xc9, 0x80, 0xed, 0xe2);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridSuperHeader.Text
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridSuperHeader/Text.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridSuperHeader/Text.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c6ddd689-69ab-43f5-ba3d-d0cdc980ede2")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DataGridSuperHeader.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<DataGridSuperHeader, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DataGridSuperHeader.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DataGridSuperHeader.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DataGridSuperHeader element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DataGridSuperHeader element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DataGrid opposite domain role accessor
		/// <summary>
		/// Gets or sets DataGrid.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders.DataGridSuperHeader
		/// </summary>
		public virtual DataGrid DataGrid
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders.DataGridSuperHeaderDomainRoleId) as DataGrid;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders.DataGridSuperHeaderDomainRoleId, value);
			}
		}
		#endregion
	}
}
