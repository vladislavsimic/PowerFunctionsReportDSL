//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship ModelRootHasComments
	/// Description for
	/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d344130c-66a6-4642-ba30-96b8348db390")]
	public partial class ModelRootHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd344130c, 0x66a6, 0x4642, 0xba, 0x30, 0x96, 0xb8, 0x34, 0x8d, 0xb3, 0x90);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasComments link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public ModelRootHasComments(ModelRoot source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasComments.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0xc1882f48, 0xe9ee, 0x4820, 0xa4, 0x57, 0xc4, 0xc1, 0x42, 0x10, 0x7f, 0x70);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments/ModelRoot.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments/ModelRoot.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments/ModelRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c1882f48-e9ee-4820-a457-c4c142107f70")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a Comment
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(Comment element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newModelRoot);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0xe6a974d3, 0x0a35, 0x44ca, 0x92, 0x70, 0x11, 0x99, 0xbc, 0xbb, 0xfa, 0x8a);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments/Comment.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments/Comment.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments/Comment.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e6a974d3-0a35-44ca-9270-1199bcbbfa8a")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ModelRoot
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ModelRoot element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasComments links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments> GetLinksToComments ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments>(modelRootInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.ModelRootDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the ModelRootHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments GetLinkToModelRoot (global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments>(commentInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasComments instance accessors
		
		/// <summary>
		/// Get any ModelRootHasComments links between a given ModelRoot and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRoot source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.ModelRootDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasComments link between a given ModelRootand a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRoot source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.ModelRootDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship CommentReferencesModelTyped
	/// Description for
	/// SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("607570c8-e442-4b21-9fb5-50ec13982fc7")]
	public partial class CommentReferencesModelTyped : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferencesModelTyped domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x607570c8, 0xe442, 0x4b21, 0x9f, 0xb5, 0x50, 0xec, 0x13, 0x98, 0x2f, 0xc7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferencesModelTyped link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public CommentReferencesModelTyped(Comment source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferencesModelTyped.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferencesModelTyped.ModelTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesModelTyped(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesModelTyped(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesModelTyped(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesModelTyped(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x0b7bcd31, 0x09d8, 0x41ae, 0xa7, 0xa9, 0xe8, 0xca, 0x36, 0xbe, 0x12, 0xf6);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped/Comment.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped/Comment.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ModelTyped", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0b7bcd31-09d8-41ae-a7a9-e8ca36be12f6")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Commented of a ModelType
		/// <summary>
		/// Gets a list of Commented.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetCommented(ModelType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, ModelTypeDomainRoleId);
		}
		#endregion
		#region ModelType domain role code
		
		/// <summary>
		/// ModelType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelTypeDomainRoleId = new global::System.Guid(0x8e02e08e, 0x8dd4, 0x4be4, 0xa6, 0x36, 0xd4, 0x1c, 0x91, 0x66, 0x31, 0xfa);
		
		/// <summary>
		/// DomainRole ModelType
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped.ModelType
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped/ModelType.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped/ModelType.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Commented", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped/ModelType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8e02e08e-8dd4-4be4-a636-d41c916631fa")]
		public virtual ModelType ModelType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelTyped of a Comment
		/// <summary>
		/// Gets a list of ModelTyped.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetModelTyped(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferencesModelTyped links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped> GetLinksToModelTyped ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped>(commentInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped.CommentDomainRoleId);
		}
		#endregion
		#region ModelType link accessor
		/// <summary>
		/// Get the list of CommentReferencesModelTyped links to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped> GetLinksToCommented ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType modelTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped>(modelTypeInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped.ModelTypeDomainRoleId);
		}
		#endregion
		#region CommentReferencesModelTyped instance accessors
		
		/// <summary>
		/// Get any CommentReferencesModelTyped links between a given Comment and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped.CommentDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped link in links )
			{
				if ( target.Equals(link.ModelType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferencesModelTyped link between a given Commentand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped.CommentDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped link in links )
			{
				if ( target.Equals(link.ModelType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship ModelRootHasTypes
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4e4b5839-ccc1-4397-b205-323b48d8fb10")]
	public partial class ModelRootHasTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4e4b5839, 0xccc1, 0x4397, 0xb2, 0x05, 0x32, 0x3b, 0x48, 0xd8, 0xfb, 0x10);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasTypes link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public ModelRootHasTypes(ModelRoot source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasTypes.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasTypes.ModelTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0x0ae701ba, 0xc94b, 0x43d1, 0xbe, 0x4f, 0x07, 0xb3, 0xa5, 0xec, 0x7c, 0x20);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes/ModelRoot.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes/ModelRoot.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Types", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes/ModelRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0ae701ba-c94b-43d1-be4f-07b3a5ec7c20")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a ModelType
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(ModelType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelTypeDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(ModelType element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelTypeDomainRoleId, newModelRoot);
		}
		#endregion
		#region ModelType domain role code
		
		/// <summary>
		/// ModelType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelTypeDomainRoleId = new global::System.Guid(0x7c256cee, 0x4104, 0x4ef5, 0x93, 0xbf, 0xdb, 0x2c, 0x35, 0xe0, 0xa4, 0x65);
		
		/// <summary>
		/// DomainRole ModelType
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelType
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes/ModelType.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes/ModelType.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes/ModelType.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7c256cee-4104-4ef5-93bf-db2c35e0a465")]
		public virtual ModelType ModelType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Types of a ModelRoot
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetTypes(ModelRoot element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasTypes links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes> GetLinksToTypes ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes>(modelRootInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelRootDomainRoleId);
		}
		#endregion
		#region ModelType link accessor
		/// <summary>
		/// Get the ModelRootHasTypes link to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes GetLinkToModelRoot (global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType modelTypeInstance)
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes>(modelTypeInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ModelType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasTypes instance accessors
		
		/// <summary>
		/// Get any ModelRootHasTypes links between a given ModelRoot and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRoot source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelRootDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes link in links )
			{
				if ( target.Equals(link.ModelType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasTypes link between a given ModelRootand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRoot source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelRootDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes link in links )
			{
				if ( target.Equals(link.ModelType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship TabReferencesTargetTabbed
	/// Description for
	/// SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5b95880b-0ed6-4c12-8b04-4dc05aaaeeaa")]
	public partial class TabReferencesTargetTabbed : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TabReferencesTargetTabbed domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5b95880b, 0x0ed6, 0x4c12, 0x8b, 0x04, 0x4d, 0xc0, 0x5a, 0xaa, 0xee, 0xaa);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TabReferencesTargetTabbed link in the same Partition as the given Tab
		/// </summary>
		/// <param name="source">Tab to use as the source of the relationship.</param>
		/// <param name="target">Tab to use as the target of the relationship.</param>
		public TabReferencesTargetTabbed(Tab source, Tab target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TabReferencesTargetTabbed.SourceTabDomainRoleId, source), new DslModeling::RoleAssignment(TabReferencesTargetTabbed.TargetTabDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TabReferencesTargetTabbed(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TabReferencesTargetTabbed(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TabReferencesTargetTabbed(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TabReferencesTargetTabbed(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceTab domain role code
		
		/// <summary>
		/// SourceTab domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceTabDomainRoleId = new global::System.Guid(0x92c2ba81, 0xa679, 0x47bd, 0xbb, 0xf0, 0xb6, 0xc5, 0xdb, 0x72, 0x53, 0x97);
		
		/// <summary>
		/// DomainRole SourceTab
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed.SourceTab
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed/SourceTab.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed/SourceTab.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetTabbed", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed/SourceTab.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("92c2ba81-a679-47bd-bbf0-b6c5db725397")]
		public virtual Tab SourceTab
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tab)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceTabDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceTabDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceTabbed of a Tab
		/// <summary>
		/// Gets a list of SourceTabbed.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Tab> GetSourceTabbed(Tab element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Tab>, Tab>(element, TargetTabDomainRoleId);
		}
		#endregion
		#region TargetTab domain role code
		
		/// <summary>
		/// TargetTab domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetTabDomainRoleId = new global::System.Guid(0xb06f5450, 0x03d5, 0x4302, 0xb6, 0xf5, 0x00, 0xa7, 0xbd, 0xdc, 0xaa, 0x29);
		
		/// <summary>
		/// DomainRole TargetTab
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed.TargetTab
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed/TargetTab.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed/TargetTab.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceTabbed", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed/TargetTab.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b06f5450-03d5-4302-b6f5-00a7bddcaa29")]
		public virtual Tab TargetTab
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tab)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetTabDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetTabDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetTabbed of a Tab
		/// <summary>
		/// Gets a list of TargetTabbed.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Tab> GetTargetTabbed(Tab element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Tab>, Tab>(element, SourceTabDomainRoleId);
		}
		#endregion
		#region SourceTab link accessor
		/// <summary>
		/// Get the list of TabReferencesTargetTabbed links to a Tab.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed> GetLinksToTargetTabbed ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab sourceTabInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed>(sourceTabInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed.SourceTabDomainRoleId);
		}
		#endregion
		#region TargetTab link accessor
		/// <summary>
		/// Get the list of TabReferencesTargetTabbed links to a Tab.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed> GetLinksToSourceTabbed ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab targetTabInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed>(targetTabInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed.TargetTabDomainRoleId);
		}
		#endregion
		#region TabReferencesTargetTabbed instance accessors
		
		/// <summary>
		/// Get any TabReferencesTargetTabbed links between a given Tab and a Tab.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed.SourceTabDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed link in links )
			{
				if ( target.Equals(link.TargetTab) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TabReferencesTargetTabbed link between a given Taband a Tab.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed.SourceTabDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed link in links )
			{
				if ( target.Equals(link.TargetTab) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship TabReferencesDataGrid
	/// Description for
	/// SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("508add89-35e2-4324-9825-1d67d0d43678")]
	public partial class TabReferencesDataGrid : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TabReferencesDataGrid domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x508add89, 0x35e2, 0x4324, 0x98, 0x25, 0x1d, 0x67, 0xd0, 0xd4, 0x36, 0x78);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TabReferencesDataGrid link in the same Partition as the given Tab
		/// </summary>
		/// <param name="source">Tab to use as the source of the relationship.</param>
		/// <param name="target">DataGrid to use as the target of the relationship.</param>
		public TabReferencesDataGrid(Tab source, DataGrid target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TabReferencesDataGrid.TabDomainRoleId, source), new DslModeling::RoleAssignment(TabReferencesDataGrid.DataGridDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TabReferencesDataGrid(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TabReferencesDataGrid(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TabReferencesDataGrid(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TabReferencesDataGrid(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Tab domain role code
		
		/// <summary>
		/// Tab domain role Id.
		/// </summary>
		public static readonly global::System.Guid TabDomainRoleId = new global::System.Guid(0x216c2616, 0xe332, 0x49e9, 0x82, 0x67, 0x04, 0x07, 0xa3, 0x6a, 0x45, 0x9d);
		
		/// <summary>
		/// DomainRole Tab
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid.Tab
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid/Tab.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid/Tab.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DataGrid", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid/Tab.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("216c2616-e332-49e9-8267-0407a36a459d")]
		public virtual Tab Tab
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tab)DslModeling::DomainRoleInfo.GetRolePlayer(this, TabDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TabDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tab of a DataGrid
		/// <summary>
		/// Gets Tab.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Tab GetTab(DataGrid element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DataGridDomainRoleId) as Tab;
		}
		
		/// <summary>
		/// Sets Tab.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTab(DataGrid element, Tab newTab)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DataGridDomainRoleId, newTab);
		}
		#endregion
		#region DataGrid domain role code
		
		/// <summary>
		/// DataGrid domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataGridDomainRoleId = new global::System.Guid(0x2282742b, 0x83b5, 0x4faf, 0x93, 0x88, 0x8e, 0xb2, 0x70, 0x33, 0xa9, 0xfd);
		
		/// <summary>
		/// DomainRole DataGrid
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid.DataGrid
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid/DataGrid.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid/DataGrid.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Tab", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid/DataGrid.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2282742b-83b5-4faf-9388-8eb27033a9fd")]
		public virtual DataGrid DataGrid
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataGrid)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataGridDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataGridDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataGrid of a Tab
		/// <summary>
		/// Gets DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DataGrid GetDataGrid(Tab element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TabDomainRoleId) as DataGrid;
		}
		
		/// <summary>
		/// Sets DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDataGrid(Tab element, DataGrid newDataGrid)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TabDomainRoleId, newDataGrid);
		}
		#endregion
		#region Tab link accessor
		/// <summary>
		/// Get the TabReferencesDataGrid link to a Tab.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid GetLinkToDataGrid (global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab tabInstance)
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid>(tabInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid.TabDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Tab not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DataGrid link accessor
		/// <summary>
		/// Get the TabReferencesDataGrid link to a DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid GetLinkToTab (global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid dataGridInstance)
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid>(dataGridInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid.DataGridDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DataGrid not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TabReferencesDataGrid instance accessors
		
		/// <summary>
		/// Get any TabReferencesDataGrid links between a given Tab and a DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid.TabDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid link in links )
			{
				if ( target.Equals(link.DataGrid) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TabReferencesDataGrid link between a given Taband a DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid.TabDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid link in links )
			{
				if ( target.Equals(link.DataGrid) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship TabHasAttributes
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8db1a25a-0591-40f6-b67f-ec4527abb8ee")]
	public partial class TabHasAttributes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TabHasAttributes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8db1a25a, 0x0591, 0x40f6, 0xb6, 0x7f, 0xec, 0x45, 0x27, 0xab, 0xb8, 0xee);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TabHasAttributes link in the same Partition as the given Tab
		/// </summary>
		/// <param name="source">Tab to use as the source of the relationship.</param>
		/// <param name="target">TabAttribute to use as the target of the relationship.</param>
		public TabHasAttributes(Tab source, TabAttribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TabHasAttributes.TabDomainRoleId, source), new DslModeling::RoleAssignment(TabHasAttributes.TabAttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TabHasAttributes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TabHasAttributes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TabHasAttributes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TabHasAttributes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Tab domain role code
		
		/// <summary>
		/// Tab domain role Id.
		/// </summary>
		public static readonly global::System.Guid TabDomainRoleId = new global::System.Guid(0xe603c66b, 0x41d9, 0x4075, 0x99, 0xca, 0xf2, 0x45, 0xda, 0x87, 0x9f, 0xbe);
		
		/// <summary>
		/// DomainRole Tab
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.Tab
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes/Tab.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes/Tab.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Attributes", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes/Tab.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e603c66b-41d9-4075-99ca-f245da879fbe")]
		public virtual Tab Tab
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tab)DslModeling::DomainRoleInfo.GetRolePlayer(this, TabDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TabDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tab of a TabAttribute
		/// <summary>
		/// Gets Tab.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Tab GetTab(TabAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TabAttributeDomainRoleId) as Tab;
		}
		
		/// <summary>
		/// Sets Tab.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTab(TabAttribute element, Tab newTab)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TabAttributeDomainRoleId, newTab);
		}
		#endregion
		#region TabAttribute domain role code
		
		/// <summary>
		/// TabAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid TabAttributeDomainRoleId = new global::System.Guid(0xed158173, 0x2feb, 0x4efb, 0xb2, 0xb4, 0xb2, 0x9e, 0x19, 0xac, 0xd9, 0xdc);
		
		/// <summary>
		/// DomainRole TabAttribute
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.TabAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes/TabAttribute.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes/TabAttribute.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Tab", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes/TabAttribute.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ed158173-2feb-4efb-b2b4-b29e19acd9dc")]
		public virtual TabAttribute TabAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TabAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, TabAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TabAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attributes of a Tab
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TabAttribute> GetAttributes(Tab element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TabAttribute>, TabAttribute>(element, TabDomainRoleId);
		}
		#endregion
		#region Tab link accessor
		/// <summary>
		/// Get the list of TabHasAttributes links to a Tab.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes> GetLinksToAttributes ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab tabInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes>(tabInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.TabDomainRoleId);
		}
		#endregion
		#region TabAttribute link accessor
		/// <summary>
		/// Get the TabHasAttributes link to a TabAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes GetLinkToTab (global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabAttribute tabAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes>(tabAttributeInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.TabAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TabAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TabHasAttributes instance accessors
		
		/// <summary>
		/// Get any TabHasAttributes links between a given Tab and a TabAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabAttribute target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.TabDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes link in links )
			{
				if ( target.Equals(link.TabAttribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TabHasAttributes link between a given Taband a TabAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabAttribute target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.TabDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes link in links )
			{
				if ( target.Equals(link.TabAttribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship DataGridHasAttributes
	/// Description for
	/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ef9946c4-2a1e-42f7-84cd-eb02957576ca")]
	public partial class DataGridHasAttributes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DataGridHasAttributes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xef9946c4, 0x2a1e, 0x42f7, 0x84, 0xcd, 0xeb, 0x02, 0x95, 0x75, 0x76, 0xca);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DataGridHasAttributes link in the same Partition as the given DataGrid
		/// </summary>
		/// <param name="source">DataGrid to use as the source of the relationship.</param>
		/// <param name="target">DataGridAttribute to use as the target of the relationship.</param>
		public DataGridHasAttributes(DataGrid source, DataGridAttribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DataGridHasAttributes.DataGridDomainRoleId, source), new DslModeling::RoleAssignment(DataGridHasAttributes.DataGridAttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataGridHasAttributes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataGridHasAttributes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataGridHasAttributes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataGridHasAttributes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DataGrid domain role code
		
		/// <summary>
		/// DataGrid domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataGridDomainRoleId = new global::System.Guid(0xfc49cc72, 0xaff6, 0x4b84, 0xb7, 0xe0, 0x48, 0x45, 0x68, 0x2b, 0x04, 0x17);
		
		/// <summary>
		/// DomainRole DataGrid
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.DataGrid
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes/DataGrid.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes/DataGrid.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Attributes", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes/DataGrid.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fc49cc72-aff6-4b84-b7e0-4845682b0417")]
		public virtual DataGrid DataGrid
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataGrid)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataGridDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataGridDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataGrid of a DataGridAttribute
		/// <summary>
		/// Gets DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DataGrid GetDataGrid(DataGridAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DataGridAttributeDomainRoleId) as DataGrid;
		}
		
		/// <summary>
		/// Sets DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDataGrid(DataGridAttribute element, DataGrid newDataGrid)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DataGridAttributeDomainRoleId, newDataGrid);
		}
		#endregion
		#region DataGridAttribute domain role code
		
		/// <summary>
		/// DataGridAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataGridAttributeDomainRoleId = new global::System.Guid(0xeeaac050, 0xbe58, 0x42cc, 0xba, 0x88, 0xd1, 0x47, 0xc9, 0x22, 0x0d, 0x83);
		
		/// <summary>
		/// DomainRole DataGridAttribute
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.DataGridAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes/DataGridAttribute.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes/DataGridAttribute.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DataGrid", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes/DataGridAttribute.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("eeaac050-be58-42cc-ba88-d147c9220d83")]
		public virtual DataGridAttribute DataGridAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataGridAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataGridAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataGridAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attributes of a DataGrid
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DataGridAttribute> GetAttributes(DataGrid element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DataGridAttribute>, DataGridAttribute>(element, DataGridDomainRoleId);
		}
		#endregion
		#region DataGrid link accessor
		/// <summary>
		/// Get the list of DataGridHasAttributes links to a DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes> GetLinksToAttributes ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid dataGridInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes>(dataGridInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.DataGridDomainRoleId);
		}
		#endregion
		#region DataGridAttribute link accessor
		/// <summary>
		/// Get the DataGridHasAttributes link to a DataGridAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes GetLinkToDataGrid (global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridAttribute dataGridAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes>(dataGridAttributeInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.DataGridAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DataGridAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DataGridHasAttributes instance accessors
		
		/// <summary>
		/// Get any DataGridHasAttributes links between a given DataGrid and a DataGridAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridAttribute target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.DataGridDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes link in links )
			{
				if ( target.Equals(link.DataGridAttribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DataGridHasAttributes link between a given DataGridand a DataGridAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridAttribute target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.DataGridDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes link in links )
			{
				if ( target.Equals(link.DataGridAttribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship DataGridHasColumns
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f693fce7-caf5-47c3-a524-39c9466b18b9")]
	public partial class DataGridHasColumns : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DataGridHasColumns domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf693fce7, 0xcaf5, 0x47c3, 0xa5, 0x24, 0x39, 0xc9, 0x46, 0x6b, 0x18, 0xb9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DataGridHasColumns link in the same Partition as the given DataGrid
		/// </summary>
		/// <param name="source">DataGrid to use as the source of the relationship.</param>
		/// <param name="target">ColumnAttribute to use as the target of the relationship.</param>
		public DataGridHasColumns(DataGrid source, ColumnAttribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DataGridHasColumns.DataGridDomainRoleId, source), new DslModeling::RoleAssignment(DataGridHasColumns.ColumnAttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataGridHasColumns(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataGridHasColumns(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataGridHasColumns(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataGridHasColumns(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DataGrid domain role code
		
		/// <summary>
		/// DataGrid domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataGridDomainRoleId = new global::System.Guid(0x70bb8c67, 0x4c2a, 0x4783, 0xb7, 0x89, 0xdb, 0xf4, 0x91, 0xaa, 0x4f, 0x49);
		
		/// <summary>
		/// DomainRole DataGrid
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.DataGrid
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns/DataGrid.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns/DataGrid.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Columns", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns/DataGrid.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("70bb8c67-4c2a-4783-b789-dbf491aa4f49")]
		public virtual DataGrid DataGrid
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataGrid)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataGridDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataGridDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataGrid of a ColumnAttribute
		/// <summary>
		/// Gets DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DataGrid GetDataGrid(ColumnAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ColumnAttributeDomainRoleId) as DataGrid;
		}
		
		/// <summary>
		/// Sets DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDataGrid(ColumnAttribute element, DataGrid newDataGrid)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ColumnAttributeDomainRoleId, newDataGrid);
		}
		#endregion
		#region ColumnAttribute domain role code
		
		/// <summary>
		/// ColumnAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid ColumnAttributeDomainRoleId = new global::System.Guid(0x194c9b48, 0xc6fa, 0x464d, 0xbc, 0xa4, 0xd5, 0xd4, 0x8c, 0x2c, 0xc5, 0x06);
		
		/// <summary>
		/// DomainRole ColumnAttribute
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.ColumnAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns/ColumnAttribute.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns/ColumnAttribute.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DataGrid", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns/ColumnAttribute.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("194c9b48-c6fa-464d-bca4-d5d48c2cc506")]
		public virtual ColumnAttribute ColumnAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ColumnAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, ColumnAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ColumnAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Columns of a DataGrid
		/// <summary>
		/// Gets a list of Columns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ColumnAttribute> GetColumns(DataGrid element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ColumnAttribute>, ColumnAttribute>(element, DataGridDomainRoleId);
		}
		#endregion
		#region DataGrid link accessor
		/// <summary>
		/// Get the list of DataGridHasColumns links to a DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns> GetLinksToColumns ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid dataGridInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns>(dataGridInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.DataGridDomainRoleId);
		}
		#endregion
		#region ColumnAttribute link accessor
		/// <summary>
		/// Get the DataGridHasColumns link to a ColumnAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns GetLinkToDataGrid (global::SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute columnAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns>(columnAttributeInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.ColumnAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ColumnAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DataGridHasColumns instance accessors
		
		/// <summary>
		/// Get any DataGridHasColumns links between a given DataGrid and a ColumnAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.DataGridDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns link in links )
			{
				if ( target.Equals(link.ColumnAttribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DataGridHasColumns link between a given DataGridand a ColumnAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.DataGridDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns link in links )
			{
				if ( target.Equals(link.ColumnAttribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship DataGridHasSuperHeaders
	/// Description for
	/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e7718c21-bd28-4d1a-a6db-b73b0a850409")]
	public partial class DataGridHasSuperHeaders : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DataGridHasSuperHeaders domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe7718c21, 0xbd28, 0x4d1a, 0xa6, 0xdb, 0xb7, 0x3b, 0x0a, 0x85, 0x04, 0x09);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DataGridHasSuperHeaders link in the same Partition as the given DataGrid
		/// </summary>
		/// <param name="source">DataGrid to use as the source of the relationship.</param>
		/// <param name="target">DataGridSuperHeader to use as the target of the relationship.</param>
		public DataGridHasSuperHeaders(DataGrid source, DataGridSuperHeader target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DataGridHasSuperHeaders.DataGridDomainRoleId, source), new DslModeling::RoleAssignment(DataGridHasSuperHeaders.DataGridSuperHeaderDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataGridHasSuperHeaders(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataGridHasSuperHeaders(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataGridHasSuperHeaders(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataGridHasSuperHeaders(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DataGrid domain role code
		
		/// <summary>
		/// DataGrid domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataGridDomainRoleId = new global::System.Guid(0x5a45a2bf, 0x92d5, 0x496d, 0xba, 0x70, 0xa6, 0x62, 0x0b, 0xcb, 0x6e, 0x6b);
		
		/// <summary>
		/// DomainRole DataGrid
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders.DataGrid
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders/DataGrid.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders/DataGrid.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SuperHeaders", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders/DataGrid.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5a45a2bf-92d5-496d-ba70-a6620bcb6e6b")]
		public virtual DataGrid DataGrid
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataGrid)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataGridDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataGridDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataGrid of a DataGridSuperHeader
		/// <summary>
		/// Gets DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DataGrid GetDataGrid(DataGridSuperHeader element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DataGridSuperHeaderDomainRoleId) as DataGrid;
		}
		
		/// <summary>
		/// Sets DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDataGrid(DataGridSuperHeader element, DataGrid newDataGrid)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DataGridSuperHeaderDomainRoleId, newDataGrid);
		}
		#endregion
		#region DataGridSuperHeader domain role code
		
		/// <summary>
		/// DataGridSuperHeader domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataGridSuperHeaderDomainRoleId = new global::System.Guid(0x83228b35, 0x7942, 0x4ab4, 0xa2, 0x86, 0x2f, 0x21, 0x7d, 0x19, 0xd2, 0x58);
		
		/// <summary>
		/// DomainRole DataGridSuperHeader
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders.DataGridSuperHeader
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders/DataGridSuperHeader.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders/DataGridSuperHeader.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DataGrid", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders/DataGridSuperHeader.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("83228b35-7942-4ab4-a286-2f217d19d258")]
		public virtual DataGridSuperHeader DataGridSuperHeader
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataGridSuperHeader)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataGridSuperHeaderDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataGridSuperHeaderDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SuperHeaders of a DataGrid
		/// <summary>
		/// Gets a list of SuperHeaders.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DataGridSuperHeader> GetSuperHeaders(DataGrid element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DataGridSuperHeader>, DataGridSuperHeader>(element, DataGridDomainRoleId);
		}
		#endregion
		#region DataGrid link accessor
		/// <summary>
		/// Get the list of DataGridHasSuperHeaders links to a DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders> GetLinksToSuperHeaders ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid dataGridInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders>(dataGridInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders.DataGridDomainRoleId);
		}
		#endregion
		#region DataGridSuperHeader link accessor
		/// <summary>
		/// Get the DataGridHasSuperHeaders link to a DataGridSuperHeader.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders GetLinkToDataGrid (global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridSuperHeader dataGridSuperHeaderInstance)
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders>(dataGridSuperHeaderInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders.DataGridSuperHeaderDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DataGridSuperHeader not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DataGridHasSuperHeaders instance accessors
		
		/// <summary>
		/// Get any DataGridHasSuperHeaders links between a given DataGrid and a DataGridSuperHeader.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridSuperHeader target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders.DataGridDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders link in links )
			{
				if ( target.Equals(link.DataGridSuperHeader) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DataGridHasSuperHeaders link between a given DataGridand a DataGridSuperHeader.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridSuperHeader target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders.DataGridDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasSuperHeaders link in links )
			{
				if ( target.Equals(link.DataGridSuperHeader) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
