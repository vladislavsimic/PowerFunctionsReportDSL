//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship ModelRootHasComments
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("200b88e4-1d0e-4f28-ae56-281001f3873e")]
	public partial class ModelRootHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x200b88e4, 0x1d0e, 0x4f28, 0xae, 0x56, 0x28, 0x10, 0x01, 0xf3, 0x87, 0x3e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasComments link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public ModelRootHasComments(ModelRoot source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasComments.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasComments.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0x9dcf299a, 0xfcf0, 0x48a2, 0x83, 0x09, 0xef, 0x0e, 0x5e, 0x8d, 0x33, 0xbf);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments/ModelRoot.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments/ModelRoot.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments/ModelRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9dcf299a-fcf0-48a2-8309-ef0e5e8d33bf")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a Comment
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(Comment element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newModelRoot);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xde674ce7, 0xeb3d, 0x4b16, 0xad, 0xae, 0xc7, 0x09, 0x8e, 0x62, 0x9e, 0x92);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments/Element.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments/Element.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("de674ce7-eb3d-4b16-adae-c7098e629e92")]
		public virtual Comment Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ModelRoot
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ModelRoot element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasComments links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments> GetLinksToComments ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments>(modelRootInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.ModelRootDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the ModelRootHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments GetLinkToModelRoot (global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment elementInstance)
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments>(elementInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasComments instance accessors
		
		/// <summary>
		/// Get any ModelRootHasComments links between a given ModelRoot and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRoot source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.ModelRootDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasComments link between a given ModelRootand a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRoot source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.ModelRootDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship CommentReferencesSubjects
	/// Description for
	/// SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("7eb5eb7d-c9e6-45fc-a949-bb4adddd93a5")]
	public partial class CommentReferencesSubjects : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferencesSubjects domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7eb5eb7d, 0xc9e6, 0x45fc, 0xa9, 0x49, 0xbb, 0x4a, 0xdd, 0xdd, 0x93, 0xa5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferencesSubjects link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public CommentReferencesSubjects(Comment source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferencesSubjects.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferencesSubjects.SubjectDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0xf9471e5c, 0x0aef, 0x4a2e, 0x88, 0x21, 0x9e, 0x03, 0xba, 0x24, 0xa1, 0xd7);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects/Comment.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects/Comment.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subjects", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f9471e5c-0aef-4a2e-8821-9e03ba24a1d7")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ModelType
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ModelType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0x03901ccb, 0x9eae, 0x4970, 0x99, 0x94, 0x49, 0x6f, 0x25, 0xd7, 0x69, 0x69);
		
		/// <summary>
		/// DomainRole Subject
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects.Subject
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects/Subject.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects/Subject.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comments", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects/Subject.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("03901ccb-9eae-4970-9994-496f25d76969")]
		public virtual ModelType Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subjects of a Comment
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetSubjects(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects> GetLinksToSubjects ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects>(commentInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects.CommentDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects> GetLinksToComments ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects>(subjectInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects.SubjectDomainRoleId);
		}
		#endregion
		#region CommentReferencesSubjects instance accessors
		
		/// <summary>
		/// Get any CommentReferencesSubjects links between a given Comment and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferencesSubjects link between a given Commentand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship ModelRootHasTypes
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("5903c980-bde9-4ced-be18-2dbffbae0cb1")]
	public partial class ModelRootHasTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5903c980, 0xbde9, 0x4ced, 0xbe, 0x18, 0x2d, 0xbf, 0xfb, 0xae, 0x0c, 0xb1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasTypes link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public ModelRootHasTypes(ModelRoot source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasTypes.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasTypes.ModelTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0x4835a2de, 0xb894, 0x453c, 0xa9, 0x88, 0x4d, 0xbd, 0x3b, 0xe8, 0xc2, 0xa0);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes/ModelRoot.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes/ModelRoot.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Types", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes/ModelRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4835a2de-b894-453c-a988-4dbd3be8c2a0")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a ModelType
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(ModelType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelTypeDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(ModelType element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelTypeDomainRoleId, newModelRoot);
		}
		#endregion
		#region ModelType domain role code
		
		/// <summary>
		/// ModelType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelTypeDomainRoleId = new global::System.Guid(0xe30f8ade, 0xd624, 0x42f8, 0xa9, 0x71, 0xc2, 0x88, 0x3a, 0xe4, 0x23, 0xb6);
		
		/// <summary>
		/// DomainRole ModelType
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelType
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes/ModelType.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes/ModelType.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes/ModelType.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e30f8ade-d624-42f8-a971-c2883ae423b6")]
		public virtual ModelType ModelType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Types of a ModelRoot
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetTypes(ModelRoot element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasTypes links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes> GetLinksToTypes ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes>(modelRootInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelRootDomainRoleId);
		}
		#endregion
		#region ModelType link accessor
		/// <summary>
		/// Get the ModelRootHasTypes link to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes GetLinkToModelRoot (global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType modelTypeInstance)
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes>(modelTypeInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ModelType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasTypes instance accessors
		
		/// <summary>
		/// Get any ModelRootHasTypes links between a given ModelRoot and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRoot source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelRootDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes link in links )
			{
				if ( target.Equals(link.ModelType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasTypes link between a given ModelRootand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRoot source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelRootDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes link in links )
			{
				if ( target.Equals(link.ModelType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
