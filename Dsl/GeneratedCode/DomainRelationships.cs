//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship ModelRootHasComments
	/// Description for
	/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d344130c-66a6-4642-ba30-96b8348db390")]
	public partial class ModelRootHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd344130c, 0x66a6, 0x4642, 0xba, 0x30, 0x96, 0xb8, 0x34, 0x8d, 0xb3, 0x90);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasComments link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public ModelRootHasComments(ModelRoot source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasComments.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0xc1882f48, 0xe9ee, 0x4820, 0xa4, 0x57, 0xc4, 0xc1, 0x42, 0x10, 0x7f, 0x70);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments/ModelRoot.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments/ModelRoot.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments/ModelRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c1882f48-e9ee-4820-a457-c4c142107f70")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a Comment
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(Comment element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newModelRoot);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0xe6a974d3, 0x0a35, 0x44ca, 0x92, 0x70, 0x11, 0x99, 0xbc, 0xbb, 0xfa, 0x8a);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments/Comment.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments/Comment.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments/Comment.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e6a974d3-0a35-44ca-9270-1199bcbbfa8a")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ModelRoot
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ModelRoot element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasComments links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments> GetLinksToComments ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments>(modelRootInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.ModelRootDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the ModelRootHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments GetLinkToModelRoot (global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments>(commentInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasComments instance accessors
		
		/// <summary>
		/// Get any ModelRootHasComments links between a given ModelRoot and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRoot source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.ModelRootDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasComments link between a given ModelRootand a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRoot source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments.ModelRootDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship CommentReferencesModelTyped
	/// Description for
	/// SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("607570c8-e442-4b21-9fb5-50ec13982fc7")]
	public partial class CommentReferencesModelTyped : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferencesModelTyped domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x607570c8, 0xe442, 0x4b21, 0x9f, 0xb5, 0x50, 0xec, 0x13, 0x98, 0x2f, 0xc7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferencesModelTyped link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public CommentReferencesModelTyped(Comment source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferencesModelTyped.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferencesModelTyped.ModelTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesModelTyped(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesModelTyped(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesModelTyped(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesModelTyped(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x0b7bcd31, 0x09d8, 0x41ae, 0xa7, 0xa9, 0xe8, 0xca, 0x36, 0xbe, 0x12, 0xf6);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped/Comment.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped/Comment.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ModelTyped", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0b7bcd31-09d8-41ae-a7a9-e8ca36be12f6")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Commented of a ModelType
		/// <summary>
		/// Gets a list of Commented.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetCommented(ModelType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, ModelTypeDomainRoleId);
		}
		#endregion
		#region ModelType domain role code
		
		/// <summary>
		/// ModelType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelTypeDomainRoleId = new global::System.Guid(0x8e02e08e, 0x8dd4, 0x4be4, 0xa6, 0x36, 0xd4, 0x1c, 0x91, 0x66, 0x31, 0xfa);
		
		/// <summary>
		/// DomainRole ModelType
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped.ModelType
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped/ModelType.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped/ModelType.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Commented", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped/ModelType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8e02e08e-8dd4-4be4-a636-d41c916631fa")]
		public virtual ModelType ModelType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelTyped of a Comment
		/// <summary>
		/// Gets a list of ModelTyped.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetModelTyped(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferencesModelTyped links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped> GetLinksToModelTyped ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped>(commentInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped.CommentDomainRoleId);
		}
		#endregion
		#region ModelType link accessor
		/// <summary>
		/// Get the list of CommentReferencesModelTyped links to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped> GetLinksToCommented ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType modelTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped>(modelTypeInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped.ModelTypeDomainRoleId);
		}
		#endregion
		#region CommentReferencesModelTyped instance accessors
		
		/// <summary>
		/// Get any CommentReferencesModelTyped links between a given Comment and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped.CommentDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped link in links )
			{
				if ( target.Equals(link.ModelType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferencesModelTyped link between a given Commentand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Comment source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped.CommentDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.CommentReferencesModelTyped link in links )
			{
				if ( target.Equals(link.ModelType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship ModelRootHasTypes
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4e4b5839-ccc1-4397-b205-323b48d8fb10")]
	public partial class ModelRootHasTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4e4b5839, 0xccc1, 0x4397, 0xb2, 0x05, 0x32, 0x3b, 0x48, 0xd8, 0xfb, 0x10);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasTypes link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public ModelRootHasTypes(ModelRoot source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasTypes.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasTypes.ModelTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0x0ae701ba, 0xc94b, 0x43d1, 0xbe, 0x4f, 0x07, 0xb3, 0xa5, 0xec, 0x7c, 0x20);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes/ModelRoot.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes/ModelRoot.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Types", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes/ModelRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0ae701ba-c94b-43d1-be4f-07b3a5ec7c20")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a ModelType
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(ModelType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelTypeDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(ModelType element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelTypeDomainRoleId, newModelRoot);
		}
		#endregion
		#region ModelType domain role code
		
		/// <summary>
		/// ModelType domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelTypeDomainRoleId = new global::System.Guid(0x7c256cee, 0x4104, 0x4ef5, 0x93, 0xbf, 0xdb, 0x2c, 0x35, 0xe0, 0xa4, 0x65);
		
		/// <summary>
		/// DomainRole ModelType
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelType
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes/ModelType.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes/ModelType.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes/ModelType.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7c256cee-4104-4ef5-93bf-db2c35e0a465")]
		public virtual ModelType ModelType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Types of a ModelRoot
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetTypes(ModelRoot element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasTypes links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes> GetLinksToTypes ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes>(modelRootInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelRootDomainRoleId);
		}
		#endregion
		#region ModelType link accessor
		/// <summary>
		/// Get the ModelRootHasTypes link to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes GetLinkToModelRoot (global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType modelTypeInstance)
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes>(modelTypeInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ModelType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasTypes instance accessors
		
		/// <summary>
		/// Get any ModelRootHasTypes links between a given ModelRoot and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRoot source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelRootDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes link in links )
			{
				if ( target.Equals(link.ModelType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasTypes link between a given ModelRootand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRoot source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelType target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes.ModelRootDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelRootHasTypes link in links )
			{
				if ( target.Equals(link.ModelType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship JMSModelHasAttributes
	/// Description for
	/// SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("66860efb-33a0-47f2-b3e4-db5037eb307e")]
	public partial class JMSModelHasAttributes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// JMSModelHasAttributes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x66860efb, 0x33a0, 0x47f2, 0xb3, 0xe4, 0xdb, 0x50, 0x37, 0xeb, 0x30, 0x7e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a JMSModelHasAttributes link in the same Partition as the given JMSModel
		/// </summary>
		/// <param name="source">JMSModel to use as the source of the relationship.</param>
		/// <param name="target">ClassAttribute to use as the target of the relationship.</param>
		public JMSModelHasAttributes(JMSModel source, ClassAttribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(JMSModelHasAttributes.JMSModelDomainRoleId, source), new DslModeling::RoleAssignment(JMSModelHasAttributes.ClassAttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public JMSModelHasAttributes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public JMSModelHasAttributes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public JMSModelHasAttributes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public JMSModelHasAttributes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region JMSModel domain role code
		
		/// <summary>
		/// JMSModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid JMSModelDomainRoleId = new global::System.Guid(0x94717ec5, 0xb798, 0x4924, 0x96, 0x06, 0xac, 0xd1, 0xc3, 0x77, 0x7b, 0xaa);
		
		/// <summary>
		/// DomainRole JMSModel
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes.JMSModel
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes/JMSModel.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes/JMSModel.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Attributes", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes/JMSModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("94717ec5-b798-4924-9606-acd1c3777baa")]
		public virtual JMSModel JMSModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (JMSModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, JMSModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, JMSModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access JMSModel of a ClassAttribute
		/// <summary>
		/// Gets JMSModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static JMSModel GetJMSModel(ClassAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ClassAttributeDomainRoleId) as JMSModel;
		}
		
		/// <summary>
		/// Sets JMSModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetJMSModel(ClassAttribute element, JMSModel newJMSModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ClassAttributeDomainRoleId, newJMSModel);
		}
		#endregion
		#region ClassAttribute domain role code
		
		/// <summary>
		/// ClassAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClassAttributeDomainRoleId = new global::System.Guid(0xba6dca6a, 0xb9a3, 0x4498, 0xa6, 0x24, 0x5e, 0xf2, 0xc7, 0x23, 0x9c, 0x55);
		
		/// <summary>
		/// DomainRole ClassAttribute
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes.ClassAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes/ClassAttribute.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes/ClassAttribute.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "JMSModel", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes/ClassAttribute.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ba6dca6a-b9a3-4498-a624-5ef2c7239c55")]
		public virtual ClassAttribute ClassAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ClassAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClassAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClassAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attributes of a JMSModel
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ClassAttribute> GetAttributes(JMSModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ClassAttribute>, ClassAttribute>(element, JMSModelDomainRoleId);
		}
		#endregion
		#region JMSModel link accessor
		/// <summary>
		/// Get the list of JMSModelHasAttributes links to a JMSModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes> GetLinksToAttributes ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModel jMSModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes>(jMSModelInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes.JMSModelDomainRoleId);
		}
		#endregion
		#region ClassAttribute link accessor
		/// <summary>
		/// Get the JMSModelHasAttributes link to a ClassAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes GetLinkToJMSModel (global::SchneiderElectricDMS.PowerFunctionsReportDSL.ClassAttribute classAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes>(classAttributeInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes.ClassAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ClassAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region JMSModelHasAttributes instance accessors
		
		/// <summary>
		/// Get any JMSModelHasAttributes links between a given JMSModel and a ClassAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModel source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ClassAttribute target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes.JMSModelDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes link in links )
			{
				if ( target.Equals(link.ClassAttribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one JMSModelHasAttributes link between a given JMSModeland a ClassAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModel source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ClassAttribute target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes.JMSModelDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModelHasAttributes link in links )
			{
				if ( target.Equals(link.ClassAttribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship Generalization
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c5c2de26-3dfe-4142-a437-ac3d7b943cc9")]
	public partial class Generalization : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Generalization domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc5c2de26, 0x3dfe, 0x4142, 0xa4, 0x37, 0xac, 0x3d, 0x7b, 0x94, 0x3c, 0xc9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Generalization link in the same Partition as the given JMSModel
		/// </summary>
		/// <param name="source">JMSModel to use as the source of the relationship.</param>
		/// <param name="target">JMSModel to use as the target of the relationship.</param>
		public Generalization(JMSModel source, JMSModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Generalization.SuperclassDomainRoleId, source), new DslModeling::RoleAssignment(Generalization.SubclassesDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Generalization(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Generalization(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Generalization(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Generalization(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Superclass domain role code
		
		/// <summary>
		/// Superclass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SuperclassDomainRoleId = new global::System.Guid(0x45d4cb8d, 0x17c7, 0x4e87, 0xbe, 0x5e, 0x10, 0x9d, 0x52, 0xbc, 0xc1, 0x44);
		
		/// <summary>
		/// DomainRole Superclass
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization.Superclass
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization/Superclass.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization/Superclass.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subclasses", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization/Superclass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("45d4cb8d-17c7-4e87-be5e-109d52bcc144")]
		public virtual JMSModel Superclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (JMSModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, SuperclassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SuperclassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Superclass of a JMSModel
		/// <summary>
		/// Gets Superclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static JMSModel GetSuperclass(JMSModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubclassesDomainRoleId) as JMSModel;
		}
		
		/// <summary>
		/// Sets Superclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSuperclass(JMSModel element, JMSModel newSuperclass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubclassesDomainRoleId, newSuperclass);
		}
		#endregion
		#region Subclasses domain role code
		
		/// <summary>
		/// Subclasses domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubclassesDomainRoleId = new global::System.Guid(0x6c56ddcf, 0x4479, 0x4a69, 0xbf, 0xdf, 0x96, 0xa1, 0x89, 0x9f, 0xff, 0x66);
		
		/// <summary>
		/// DomainRole Subclasses
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization.Subclasses
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization/Subclasses.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization/Subclasses.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Superclass", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization/Subclasses.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("6c56ddcf-4479-4a69-bfdf-96a1899fff66")]
		public virtual JMSModel Subclasses
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (JMSModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubclassesDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubclassesDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subclasses of a JMSModel
		/// <summary>
		/// Gets a list of Subclasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<JMSModel> GetSubclasses(JMSModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<JMSModel>, JMSModel>(element, SuperclassDomainRoleId);
		}
		#endregion
		#region Superclass link accessor
		/// <summary>
		/// Get the list of Generalization links to a JMSModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization> GetLinksToSubclasses ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModel superclassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization>(superclassInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization.SuperclassDomainRoleId);
		}
		#endregion
		#region Subclasses link accessor
		/// <summary>
		/// Get the Generalization link to a JMSModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization GetLinkToSuperclass (global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModel subclassesInstance)
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization>(subclassesInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization.SubclassesDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Subclasses not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Generalization instance accessors
		
		/// <summary>
		/// Get any Generalization links between a given JMSModel and a JMSModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModel source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModel target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization.SuperclassDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization link in links )
			{
				if ( target.Equals(link.Subclasses) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Generalization link between a given JMSModeland a JMSModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModel source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModel target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization.SuperclassDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Generalization link in links )
			{
				if ( target.Equals(link.Subclasses) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship Association
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Association
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Association.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Association.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("57c335cd-3f14-4ef0-ae24-fbe7d2e033d5")]
	public partial class Association : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Association domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x57c335cd, 0x3f14, 0x4ef0, 0xae, 0x24, 0xfb, 0xe7, 0xd2, 0xe0, 0x33, 0xd5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Association link in the same Partition as the given JMSModel
		/// </summary>
		/// <param name="source">JMSModel to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public Association(JMSModel source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Association.SourceDomainRoleId, source), new DslModeling::RoleAssignment(Association.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Association(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Association(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Association(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Association(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xfed48ede, 0x60f8, 0x4569, 0x94, 0xf2, 0x11, 0x25, 0x2d, 0xa1, 0xc3, 0xd4);
		
		/// <summary>
		/// DomainRole Source
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Association.Source
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Association/Source.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Association/Source.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.Association/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fed48ede-60f8-4569-94f2-11252da1c3d4")]
		public virtual JMSModel Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (JMSModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sources of a ModelClass
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<JMSModel> GetSources(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<JMSModel>, JMSModel>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0xb93aeaa7, 0x9048, 0x4e6d, 0x8e, 0x36, 0x74, 0x02, 0x54, 0xa1, 0x1e, 0x67);
		
		/// <summary>
		/// DomainRole Target
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Association.Target
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Association/Target.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Association/Target.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.Association/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b93aeaa7-9048-4e6d-8e36-740254a11e67")]
		public virtual ModelClass Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Targets of a JMSModel
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetTargets(JMSModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(element, SourceDomainRoleId);
		}
		#endregion
		#region SourceMultiplicity domain property code
		
		/// <summary>
		/// SourceMultiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceMultiplicityDomainPropertyId = new global::System.Guid(0x54f889b9, 0x9aa0, 0x4e16, 0x99, 0x24, 0x89, 0x7c, 0xc3, 0x43, 0x6e, 0x4f);
		
		/// <summary>
		/// Storage for SourceMultiplicity
		/// </summary>
		private Multiplicity sourceMultiplicityPropertyStorage = Multiplicity.One;
		
		/// <summary>
		/// Gets or sets the value of SourceMultiplicity domain property.
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Association.Source
		/// Multiplicity
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Association/SourceMultiplicity.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Association/SourceMultiplicity.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Multiplicity.One)]
		[DslModeling::DomainObjectId("54f889b9-9aa0-4e16-9924-897cc3436e4f")]
		public Multiplicity SourceMultiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceMultiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceMultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.SourceMultiplicity domain property.
		/// </summary>
		internal sealed partial class SourceMultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, Multiplicity>
		{
			private SourceMultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.SourceMultiplicity domain property value handler.
			/// </summary>
			public static readonly SourceMultiplicityPropertyHandler Instance = new SourceMultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.SourceMultiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceMultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Multiplicity GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceMultiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, Multiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Multiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceMultiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceRoleName domain property code
		
		/// <summary>
		/// SourceRoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceRoleNameDomainPropertyId = new global::System.Guid(0x14e315b7, 0xeb1b, 0x4ac0, 0xbd, 0x7d, 0x22, 0x4e, 0x03, 0x25, 0x08, 0xf9);
		
		/// <summary>
		/// Storage for SourceRoleName
		/// </summary>
		private global::System.String sourceRoleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SourceRoleName domain property.
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Association.Source
		/// Role Name
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Association/SourceRoleName.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Association/SourceRoleName.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("14e315b7-eb1b-4ac0-bd7d-224e032508f9")]
		public global::System.String SourceRoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceRoleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceRoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.SourceRoleName domain property.
		/// </summary>
		internal sealed partial class SourceRoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private SourceRoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.SourceRoleName domain property value handler.
			/// </summary>
			public static readonly SourceRoleNamePropertyHandler Instance = new SourceRoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.SourceRoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceRoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceRoleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceRoleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetMultiplicity domain property code
		
		/// <summary>
		/// TargetMultiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetMultiplicityDomainPropertyId = new global::System.Guid(0x626e99f1, 0x35e9, 0x4685, 0x84, 0x86, 0x1a, 0x14, 0x99, 0x96, 0x2a, 0xca);
		
		/// <summary>
		/// Storage for TargetMultiplicity
		/// </summary>
		private Multiplicity targetMultiplicityPropertyStorage = Multiplicity.One;
		
		/// <summary>
		/// Gets or sets the value of TargetMultiplicity domain property.
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Association.Target
		/// Multiplicity
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Association/TargetMultiplicity.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Association/TargetMultiplicity.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Multiplicity.One)]
		[DslModeling::DomainObjectId("626e99f1-35e9-4685-8486-1a1499962aca")]
		public Multiplicity TargetMultiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetMultiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetMultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.TargetMultiplicity domain property.
		/// </summary>
		internal sealed partial class TargetMultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, Multiplicity>
		{
			private TargetMultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.TargetMultiplicity domain property value handler.
			/// </summary>
			public static readonly TargetMultiplicityPropertyHandler Instance = new TargetMultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.TargetMultiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetMultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Multiplicity GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetMultiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, Multiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Multiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetMultiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetRoleName domain property code
		
		/// <summary>
		/// TargetRoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetRoleNameDomainPropertyId = new global::System.Guid(0xe6a22dce, 0x47d9, 0x45ac, 0x80, 0x2d, 0x12, 0x22, 0x1d, 0xd8, 0x88, 0x76);
		
		/// <summary>
		/// Storage for TargetRoleName
		/// </summary>
		private global::System.String targetRoleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TargetRoleName domain property.
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Association.Target
		/// Role Name
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Association/TargetRoleName.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Association/TargetRoleName.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e6a22dce-47d9-45ac-802d-12221dd88876")]
		public global::System.String TargetRoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetRoleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetRoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.TargetRoleName domain property.
		/// </summary>
		internal sealed partial class TargetRoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private TargetRoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.TargetRoleName domain property value handler.
			/// </summary>
			public static readonly TargetRoleNamePropertyHandler Instance = new TargetRoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.TargetRoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetRoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetRoleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetRoleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AccessModifier domain property code
		
		/// <summary>
		/// AccessModifier domain property Id.
		/// </summary>
		public static readonly global::System.Guid AccessModifierDomainPropertyId = new global::System.Guid(0xc8658a42, 0x92e8, 0x4b75, 0x94, 0x1e, 0x6b, 0xc9, 0xb1, 0x0b, 0xdd, 0x7d);
		
		/// <summary>
		/// Storage for AccessModifier
		/// </summary>
		private TypeAccessModifier accessModifierPropertyStorage = TypeAccessModifier.Public;
		
		/// <summary>
		/// Gets or sets the value of AccessModifier domain property.
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Association.Access
		/// Modifier
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Association/AccessModifier.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Association/AccessModifier.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(TypeAccessModifier.Public)]
		[DslModeling::DomainObjectId("c8658a42-92e8-4b75-941e-6bc9b10bdd7d")]
		public TypeAccessModifier AccessModifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return accessModifierPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AccessModifierPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.AccessModifier domain property.
		/// </summary>
		internal sealed partial class AccessModifierPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, TypeAccessModifier>
		{
			private AccessModifierPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.AccessModifier domain property value handler.
			/// </summary>
			public static readonly AccessModifierPropertyHandler Instance = new AccessModifierPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.AccessModifier domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AccessModifierDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed TypeAccessModifier GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.accessModifierPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, TypeAccessModifier newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				TypeAccessModifier oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.accessModifierPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsDataMember domain property code
		
		/// <summary>
		/// IsDataMember domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsDataMemberDomainPropertyId = new global::System.Guid(0x2f64272b, 0x8bb2, 0x4372, 0x92, 0xb4, 0x03, 0xee, 0xea, 0xb8, 0xf2, 0x9a);
		
		/// <summary>
		/// Storage for IsDataMember
		/// </summary>
		private global::System.Boolean isDataMemberPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsDataMember domain property.
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Association.Is Data
		/// Member
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Association/IsDataMember.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Association/IsDataMember.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("2f64272b-8bb2-4372-92b4-03eeeab8f29a")]
		public global::System.Boolean IsDataMember
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isDataMemberPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsDataMemberPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.IsDataMember domain property.
		/// </summary>
		internal sealed partial class IsDataMemberPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.Boolean>
		{
			private IsDataMemberPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.IsDataMember domain property value handler.
			/// </summary>
			public static readonly IsDataMemberPropertyHandler Instance = new IsDataMemberPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.IsDataMember domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsDataMemberDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isDataMemberPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isDataMemberPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xa6cbfb75, 0x9b32, 0x4369, 0x91, 0x3b, 0xd0, 0x37, 0x52, 0x19, 0xa7, 0x57);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.Association.Description
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Association/Description.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Association/Description.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a6cbfb75-9b32-4369-913b-d0375219a757")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelCode domain property code
		
		/// <summary>
		/// ModelCode domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModelCodeDomainPropertyId = new global::System.Guid(0x2b1cc60f, 0x7173, 0x476b, 0xa9, 0x20, 0x8c, 0x11, 0x1f, 0x9b, 0x04, 0xe1);
		
		/// <summary>
		/// Storage for ModelCode
		/// </summary>
		private global::System.String modelCodePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ModelCode domain property.
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Association.Model
		/// Code
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Association/ModelCode.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.Association/ModelCode.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2b1cc60f-7173-476b-a920-8c111f9b04e1")]
		public global::System.String ModelCode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modelCodePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModelCodePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.ModelCode domain property.
		/// </summary>
		internal sealed partial class ModelCodePropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private ModelCodePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.ModelCode domain property value handler.
			/// </summary>
			public static readonly ModelCodePropertyHandler Instance = new ModelCodePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.ModelCode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModelCodeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modelCodePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modelCodePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of Association links to a JMSModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.Association> GetLinksToTargets ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModel sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.Association>(sourceInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.Association.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of Association links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.Association> GetLinksToSources ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelClass targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.Association>(targetInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.Association.TargetDomainRoleId);
		}
		#endregion
		#region Association instance accessors
		
		/// <summary>
		/// Get any Association links between a given JMSModel and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.Association> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModel source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelClass target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.Association> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.Association>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.Association> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.Association>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.Association.SourceDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Association link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship UndirectionalAssociation
	/// Description for
	/// SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("959ee0a7-917f-4557-9086-fdc3709798e1")]
	public partial class UndirectionalAssociation : Association
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UndirectionalAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x959ee0a7, 0x917f, 0x4557, 0x90, 0x86, 0xfd, 0xc3, 0x70, 0x97, 0x98, 0xe1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UndirectionalAssociation link in the same Partition as the given JMSModel
		/// </summary>
		/// <param name="source">JMSModel to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public UndirectionalAssociation(JMSModel source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UndirectionalAssociation.JMSModelDomainRoleId, source), new DslModeling::RoleAssignment(UndirectionalAssociation.ModelClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UndirectionalAssociation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UndirectionalAssociation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UndirectionalAssociation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UndirectionalAssociation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region JMSModel domain role code
		
		/// <summary>
		/// JMSModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid JMSModelDomainRoleId = new global::System.Guid(0x38be2565, 0x7015, 0x4c78, 0xad, 0x01, 0xb3, 0xcb, 0x9e, 0x40, 0x41, 0x02);
		
		/// <summary>
		/// DomainRole JMSModel
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation.JMSModel
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation/JMSModel.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation/JMSModel.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "UndirectionalAssociationTargets", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation/JMSModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("38be2565-7015-4c78-ad01-b3cb9e404102")]
		public virtual JMSModel JMSModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (JMSModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, JMSModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, JMSModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UndirectionalAssociationSources of a ModelClass
		/// <summary>
		/// Gets a list of UndirectionalAssociationSources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<JMSModel> GetUndirectionalAssociationSources(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<JMSModel>, JMSModel>(element, ModelClassDomainRoleId);
		}
		#endregion
		#region Source domain role override
		
		/// <summary>
		/// Gets the element playing JMSModel domain role.
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Association.Source
		/// </summary>
		public override JMSModel Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.JMSModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.JMSModel = value;
			}
		}
		
		#endregion
		#region ModelClass domain role code
		
		/// <summary>
		/// ModelClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelClassDomainRoleId = new global::System.Guid(0x4a85f170, 0x6e8e, 0x412a, 0xbb, 0x96, 0xb8, 0xb2, 0xb5, 0x89, 0x9a, 0xc2);
		
		/// <summary>
		/// DomainRole ModelClass
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation.ModelClass
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation/ModelClass.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation/ModelClass.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "UndirectionalAssociationSources", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation/ModelClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4a85f170-6e8e-412a-bb96-b8b2b5899ac2")]
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UndirectionalAssociationTargets of a JMSModel
		/// <summary>
		/// Gets a list of UndirectionalAssociationTargets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetUndirectionalAssociationTargets(JMSModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(element, JMSModelDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing ModelClass domain role.
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.Association.Target
		/// </summary>
		public override ModelClass Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ModelClass;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ModelClass = value;
			}
		}
		
		#endregion
		#region JMSModel link accessor
		/// <summary>
		/// Get the list of UndirectionalAssociation links to a JMSModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation> GetLinksToUndirectionalAssociationTargets ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModel jMSModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation>(jMSModelInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation.JMSModelDomainRoleId);
		}
		#endregion
		#region ModelClass link accessor
		/// <summary>
		/// Get the list of UndirectionalAssociation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation> GetLinksToUndirectionalAssociationSources ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelClass modelClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation>(modelClassInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation.ModelClassDomainRoleId);
		}
		#endregion
		#region UndirectionalAssociation instance accessors
		
		/// <summary>
		/// Get any UndirectionalAssociation links between a given JMSModel and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModel source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelClass target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation.JMSModelDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation link in links )
			{
				if ( target.Equals(link.ModelClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UndirectionalAssociation link between a given JMSModeland a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModel source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ModelClass target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation.JMSModelDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.UndirectionalAssociation link in links )
			{
				if ( target.Equals(link.ModelClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship EnumHasValues
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("79613aa9-9394-44e8-bed4-a86f5cf31be9")]
	public partial class EnumHasValues : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EnumHasValues domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x79613aa9, 0x9394, 0x44e8, 0xbe, 0xd4, 0xa8, 0x6f, 0x5c, 0xf3, 0x1b, 0xe9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EnumHasValues link in the same Partition as the given Enum
		/// </summary>
		/// <param name="source">Enum to use as the source of the relationship.</param>
		/// <param name="target">EnumAttribute to use as the target of the relationship.</param>
		public EnumHasValues(Enum source, EnumAttribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EnumHasValues.EnumDomainRoleId, source), new DslModeling::RoleAssignment(EnumHasValues.EnumAttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EnumHasValues(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EnumHasValues(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EnumHasValues(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EnumHasValues(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Enum domain role code
		
		/// <summary>
		/// Enum domain role Id.
		/// </summary>
		public static readonly global::System.Guid EnumDomainRoleId = new global::System.Guid(0x8e8acfb2, 0x6417, 0x4e13, 0x8b, 0x91, 0x61, 0x3e, 0xf1, 0x34, 0x55, 0xf7);
		
		/// <summary>
		/// DomainRole Enum
		/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues.Enum
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues/Enum.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues/Enum.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Values", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues/Enum.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8e8acfb2-6417-4e13-8b91-613ef13455f7")]
		public virtual Enum Enum
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Enum)DslModeling::DomainRoleInfo.GetRolePlayer(this, EnumDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EnumDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Enum of a EnumAttribute
		/// <summary>
		/// Gets Enum.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Enum GetEnum(EnumAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EnumAttributeDomainRoleId) as Enum;
		}
		
		/// <summary>
		/// Sets Enum.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEnum(EnumAttribute element, Enum newEnum)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EnumAttributeDomainRoleId, newEnum);
		}
		#endregion
		#region EnumAttribute domain role code
		
		/// <summary>
		/// EnumAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid EnumAttributeDomainRoleId = new global::System.Guid(0x1af0f984, 0xb645, 0x47fd, 0xb1, 0x93, 0xd8, 0x6a, 0x85, 0xfb, 0x5c, 0x22);
		
		/// <summary>
		/// DomainRole EnumAttribute
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues.EnumAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues/EnumAttribute.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues/EnumAttribute.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Enum", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues/EnumAttribute.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1af0f984-b645-47fd-b193-d86a85fb5c22")]
		public virtual EnumAttribute EnumAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EnumAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, EnumAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EnumAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Values of a Enum
		/// <summary>
		/// Gets a list of Values.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EnumAttribute> GetValues(Enum element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EnumAttribute>, EnumAttribute>(element, EnumDomainRoleId);
		}
		#endregion
		#region Enum link accessor
		/// <summary>
		/// Get the list of EnumHasValues links to a Enum.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues> GetLinksToValues ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Enum enumInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues>(enumInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues.EnumDomainRoleId);
		}
		#endregion
		#region EnumAttribute link accessor
		/// <summary>
		/// Get the EnumHasValues link to a EnumAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues GetLinkToEnum (global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumAttribute enumAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues>(enumAttributeInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues.EnumAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EnumAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EnumHasValues instance accessors
		
		/// <summary>
		/// Get any EnumHasValues links between a given Enum and a EnumAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Enum source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumAttribute target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues.EnumDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues link in links )
			{
				if ( target.Equals(link.EnumAttribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EnumHasValues link between a given Enumand a EnumAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Enum source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumAttribute target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues.EnumDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.EnumHasValues link in links )
			{
				if ( target.Equals(link.EnumAttribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship TabReferencesTargetTabbed
	/// Description for
	/// SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5b95880b-0ed6-4c12-8b04-4dc05aaaeeaa")]
	public partial class TabReferencesTargetTabbed : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TabReferencesTargetTabbed domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5b95880b, 0x0ed6, 0x4c12, 0x8b, 0x04, 0x4d, 0xc0, 0x5a, 0xaa, 0xee, 0xaa);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TabReferencesTargetTabbed link in the same Partition as the given Tab
		/// </summary>
		/// <param name="source">Tab to use as the source of the relationship.</param>
		/// <param name="target">Tab to use as the target of the relationship.</param>
		public TabReferencesTargetTabbed(Tab source, Tab target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TabReferencesTargetTabbed.SourceTabDomainRoleId, source), new DslModeling::RoleAssignment(TabReferencesTargetTabbed.TargetTabDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TabReferencesTargetTabbed(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TabReferencesTargetTabbed(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TabReferencesTargetTabbed(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TabReferencesTargetTabbed(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceTab domain role code
		
		/// <summary>
		/// SourceTab domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceTabDomainRoleId = new global::System.Guid(0x92c2ba81, 0xa679, 0x47bd, 0xbb, 0xf0, 0xb6, 0xc5, 0xdb, 0x72, 0x53, 0x97);
		
		/// <summary>
		/// DomainRole SourceTab
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed.SourceTab
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed/SourceTab.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed/SourceTab.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetTabbed", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed/SourceTab.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("92c2ba81-a679-47bd-bbf0-b6c5db725397")]
		public virtual Tab SourceTab
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tab)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceTabDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceTabDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceTabbed of a Tab
		/// <summary>
		/// Gets a list of SourceTabbed.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Tab> GetSourceTabbed(Tab element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Tab>, Tab>(element, TargetTabDomainRoleId);
		}
		#endregion
		#region TargetTab domain role code
		
		/// <summary>
		/// TargetTab domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetTabDomainRoleId = new global::System.Guid(0xb06f5450, 0x03d5, 0x4302, 0xb6, 0xf5, 0x00, 0xa7, 0xbd, 0xdc, 0xaa, 0x29);
		
		/// <summary>
		/// DomainRole TargetTab
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed.TargetTab
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed/TargetTab.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed/TargetTab.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceTabbed", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed/TargetTab.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b06f5450-03d5-4302-b6f5-00a7bddcaa29")]
		public virtual Tab TargetTab
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tab)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetTabDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetTabDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetTabbed of a Tab
		/// <summary>
		/// Gets a list of TargetTabbed.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Tab> GetTargetTabbed(Tab element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Tab>, Tab>(element, SourceTabDomainRoleId);
		}
		#endregion
		#region SourceTab link accessor
		/// <summary>
		/// Get the list of TabReferencesTargetTabbed links to a Tab.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed> GetLinksToTargetTabbed ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab sourceTabInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed>(sourceTabInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed.SourceTabDomainRoleId);
		}
		#endregion
		#region TargetTab link accessor
		/// <summary>
		/// Get the list of TabReferencesTargetTabbed links to a Tab.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed> GetLinksToSourceTabbed ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab targetTabInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed>(targetTabInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed.TargetTabDomainRoleId);
		}
		#endregion
		#region TabReferencesTargetTabbed instance accessors
		
		/// <summary>
		/// Get any TabReferencesTargetTabbed links between a given Tab and a Tab.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed.SourceTabDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed link in links )
			{
				if ( target.Equals(link.TargetTab) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TabReferencesTargetTabbed link between a given Taband a Tab.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed.SourceTabDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesTargetTabbed link in links )
			{
				if ( target.Equals(link.TargetTab) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship TabReferencesDataGrid
	/// Description for
	/// SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("508add89-35e2-4324-9825-1d67d0d43678")]
	public partial class TabReferencesDataGrid : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TabReferencesDataGrid domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x508add89, 0x35e2, 0x4324, 0x98, 0x25, 0x1d, 0x67, 0xd0, 0xd4, 0x36, 0x78);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TabReferencesDataGrid link in the same Partition as the given Tab
		/// </summary>
		/// <param name="source">Tab to use as the source of the relationship.</param>
		/// <param name="target">DataGrid to use as the target of the relationship.</param>
		public TabReferencesDataGrid(Tab source, DataGrid target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TabReferencesDataGrid.TabDomainRoleId, source), new DslModeling::RoleAssignment(TabReferencesDataGrid.DataGridDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TabReferencesDataGrid(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TabReferencesDataGrid(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TabReferencesDataGrid(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TabReferencesDataGrid(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Tab domain role code
		
		/// <summary>
		/// Tab domain role Id.
		/// </summary>
		public static readonly global::System.Guid TabDomainRoleId = new global::System.Guid(0x216c2616, 0xe332, 0x49e9, 0x82, 0x67, 0x04, 0x07, 0xa3, 0x6a, 0x45, 0x9d);
		
		/// <summary>
		/// DomainRole Tab
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid.Tab
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid/Tab.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid/Tab.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DataGrid", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid/Tab.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("216c2616-e332-49e9-8267-0407a36a459d")]
		public virtual Tab Tab
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tab)DslModeling::DomainRoleInfo.GetRolePlayer(this, TabDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TabDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tab of a DataGrid
		/// <summary>
		/// Gets Tab.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Tab GetTab(DataGrid element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DataGridDomainRoleId) as Tab;
		}
		
		/// <summary>
		/// Sets Tab.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTab(DataGrid element, Tab newTab)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DataGridDomainRoleId, newTab);
		}
		#endregion
		#region DataGrid domain role code
		
		/// <summary>
		/// DataGrid domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataGridDomainRoleId = new global::System.Guid(0x2282742b, 0x83b5, 0x4faf, 0x93, 0x88, 0x8e, 0xb2, 0x70, 0x33, 0xa9, 0xfd);
		
		/// <summary>
		/// DomainRole DataGrid
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid.DataGrid
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid/DataGrid.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid/DataGrid.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Tab", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid/DataGrid.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2282742b-83b5-4faf-9388-8eb27033a9fd")]
		public virtual DataGrid DataGrid
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataGrid)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataGridDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataGridDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataGrid of a Tab
		/// <summary>
		/// Gets DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DataGrid GetDataGrid(Tab element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TabDomainRoleId) as DataGrid;
		}
		
		/// <summary>
		/// Sets DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDataGrid(Tab element, DataGrid newDataGrid)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TabDomainRoleId, newDataGrid);
		}
		#endregion
		#region Tab link accessor
		/// <summary>
		/// Get the TabReferencesDataGrid link to a Tab.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid GetLinkToDataGrid (global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab tabInstance)
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid>(tabInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid.TabDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Tab not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DataGrid link accessor
		/// <summary>
		/// Get the TabReferencesDataGrid link to a DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid GetLinkToTab (global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid dataGridInstance)
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid>(dataGridInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid.DataGridDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DataGrid not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TabReferencesDataGrid instance accessors
		
		/// <summary>
		/// Get any TabReferencesDataGrid links between a given Tab and a DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid.TabDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid link in links )
			{
				if ( target.Equals(link.DataGrid) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TabReferencesDataGrid link between a given Taband a DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid.TabDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabReferencesDataGrid link in links )
			{
				if ( target.Equals(link.DataGrid) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship TabHasAttributes
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8db1a25a-0591-40f6-b67f-ec4527abb8ee")]
	public partial class TabHasAttributes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TabHasAttributes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8db1a25a, 0x0591, 0x40f6, 0xb6, 0x7f, 0xec, 0x45, 0x27, 0xab, 0xb8, 0xee);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TabHasAttributes link in the same Partition as the given Tab
		/// </summary>
		/// <param name="source">Tab to use as the source of the relationship.</param>
		/// <param name="target">TabAttribute to use as the target of the relationship.</param>
		public TabHasAttributes(Tab source, TabAttribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TabHasAttributes.TabDomainRoleId, source), new DslModeling::RoleAssignment(TabHasAttributes.TabAttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TabHasAttributes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TabHasAttributes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TabHasAttributes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TabHasAttributes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Tab domain role code
		
		/// <summary>
		/// Tab domain role Id.
		/// </summary>
		public static readonly global::System.Guid TabDomainRoleId = new global::System.Guid(0xe603c66b, 0x41d9, 0x4075, 0x99, 0xca, 0xf2, 0x45, 0xda, 0x87, 0x9f, 0xbe);
		
		/// <summary>
		/// DomainRole Tab
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.Tab
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes/Tab.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes/Tab.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Attributes", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes/Tab.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e603c66b-41d9-4075-99ca-f245da879fbe")]
		public virtual Tab Tab
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tab)DslModeling::DomainRoleInfo.GetRolePlayer(this, TabDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TabDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tab of a TabAttribute
		/// <summary>
		/// Gets Tab.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Tab GetTab(TabAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TabAttributeDomainRoleId) as Tab;
		}
		
		/// <summary>
		/// Sets Tab.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTab(TabAttribute element, Tab newTab)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TabAttributeDomainRoleId, newTab);
		}
		#endregion
		#region TabAttribute domain role code
		
		/// <summary>
		/// TabAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid TabAttributeDomainRoleId = new global::System.Guid(0xed158173, 0x2feb, 0x4efb, 0xb2, 0xb4, 0xb2, 0x9e, 0x19, 0xac, 0xd9, 0xdc);
		
		/// <summary>
		/// DomainRole TabAttribute
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.TabAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes/TabAttribute.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes/TabAttribute.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Tab", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes/TabAttribute.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ed158173-2feb-4efb-b2b4-b29e19acd9dc")]
		public virtual TabAttribute TabAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TabAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, TabAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TabAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attributes of a Tab
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TabAttribute> GetAttributes(Tab element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TabAttribute>, TabAttribute>(element, TabDomainRoleId);
		}
		#endregion
		#region Tab link accessor
		/// <summary>
		/// Get the list of TabHasAttributes links to a Tab.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes> GetLinksToAttributes ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab tabInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes>(tabInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.TabDomainRoleId);
		}
		#endregion
		#region TabAttribute link accessor
		/// <summary>
		/// Get the TabHasAttributes link to a TabAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes GetLinkToTab (global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabAttribute tabAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes>(tabAttributeInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.TabAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TabAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TabHasAttributes instance accessors
		
		/// <summary>
		/// Get any TabHasAttributes links between a given Tab and a TabAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabAttribute target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.TabDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes link in links )
			{
				if ( target.Equals(link.TabAttribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TabHasAttributes link between a given Taband a TabAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.Tab source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabAttribute target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes.TabDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.TabHasAttributes link in links )
			{
				if ( target.Equals(link.TabAttribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship DataGridHasAttributes
	/// Description for
	/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ef9946c4-2a1e-42f7-84cd-eb02957576ca")]
	public partial class DataGridHasAttributes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DataGridHasAttributes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xef9946c4, 0x2a1e, 0x42f7, 0x84, 0xcd, 0xeb, 0x02, 0x95, 0x75, 0x76, 0xca);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DataGridHasAttributes link in the same Partition as the given DataGrid
		/// </summary>
		/// <param name="source">DataGrid to use as the source of the relationship.</param>
		/// <param name="target">DataGridAttribute to use as the target of the relationship.</param>
		public DataGridHasAttributes(DataGrid source, DataGridAttribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DataGridHasAttributes.DataGridDomainRoleId, source), new DslModeling::RoleAssignment(DataGridHasAttributes.DataGridAttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataGridHasAttributes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataGridHasAttributes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataGridHasAttributes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataGridHasAttributes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DataGrid domain role code
		
		/// <summary>
		/// DataGrid domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataGridDomainRoleId = new global::System.Guid(0xfc49cc72, 0xaff6, 0x4b84, 0xb7, 0xe0, 0x48, 0x45, 0x68, 0x2b, 0x04, 0x17);
		
		/// <summary>
		/// DomainRole DataGrid
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.DataGrid
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes/DataGrid.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes/DataGrid.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Attributes", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes/DataGrid.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fc49cc72-aff6-4b84-b7e0-4845682b0417")]
		public virtual DataGrid DataGrid
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataGrid)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataGridDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataGridDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataGrid of a DataGridAttribute
		/// <summary>
		/// Gets DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DataGrid GetDataGrid(DataGridAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DataGridAttributeDomainRoleId) as DataGrid;
		}
		
		/// <summary>
		/// Sets DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDataGrid(DataGridAttribute element, DataGrid newDataGrid)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DataGridAttributeDomainRoleId, newDataGrid);
		}
		#endregion
		#region DataGridAttribute domain role code
		
		/// <summary>
		/// DataGridAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataGridAttributeDomainRoleId = new global::System.Guid(0xeeaac050, 0xbe58, 0x42cc, 0xba, 0x88, 0xd1, 0x47, 0xc9, 0x22, 0x0d, 0x83);
		
		/// <summary>
		/// DomainRole DataGridAttribute
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.DataGridAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes/DataGridAttribute.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes/DataGridAttribute.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DataGrid", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes/DataGridAttribute.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("eeaac050-be58-42cc-ba88-d147c9220d83")]
		public virtual DataGridAttribute DataGridAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataGridAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataGridAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataGridAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attributes of a DataGrid
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DataGridAttribute> GetAttributes(DataGrid element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DataGridAttribute>, DataGridAttribute>(element, DataGridDomainRoleId);
		}
		#endregion
		#region DataGrid link accessor
		/// <summary>
		/// Get the list of DataGridHasAttributes links to a DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes> GetLinksToAttributes ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid dataGridInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes>(dataGridInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.DataGridDomainRoleId);
		}
		#endregion
		#region DataGridAttribute link accessor
		/// <summary>
		/// Get the DataGridHasAttributes link to a DataGridAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes GetLinkToDataGrid (global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridAttribute dataGridAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes>(dataGridAttributeInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.DataGridAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DataGridAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DataGridHasAttributes instance accessors
		
		/// <summary>
		/// Get any DataGridHasAttributes links between a given DataGrid and a DataGridAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridAttribute target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.DataGridDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes link in links )
			{
				if ( target.Equals(link.DataGridAttribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DataGridHasAttributes link between a given DataGridand a DataGridAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridAttribute target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes.DataGridDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasAttributes link in links )
			{
				if ( target.Equals(link.DataGridAttribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship DataGridHasColumns
	/// Description for SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f693fce7-caf5-47c3-a524-39c9466b18b9")]
	public partial class DataGridHasColumns : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DataGridHasColumns domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf693fce7, 0xcaf5, 0x47c3, 0xa5, 0x24, 0x39, 0xc9, 0x46, 0x6b, 0x18, 0xb9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DataGridHasColumns link in the same Partition as the given DataGrid
		/// </summary>
		/// <param name="source">DataGrid to use as the source of the relationship.</param>
		/// <param name="target">ColumnAttribute to use as the target of the relationship.</param>
		public DataGridHasColumns(DataGrid source, ColumnAttribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DataGridHasColumns.DataGridDomainRoleId, source), new DslModeling::RoleAssignment(DataGridHasColumns.ColumnAttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataGridHasColumns(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataGridHasColumns(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataGridHasColumns(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataGridHasColumns(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DataGrid domain role code
		
		/// <summary>
		/// DataGrid domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataGridDomainRoleId = new global::System.Guid(0x70bb8c67, 0x4c2a, 0x4783, 0xb7, 0x89, 0xdb, 0xf4, 0x91, 0xaa, 0x4f, 0x49);
		
		/// <summary>
		/// DomainRole DataGrid
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.DataGrid
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns/DataGrid.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns/DataGrid.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Columns", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns/DataGrid.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("70bb8c67-4c2a-4783-b789-dbf491aa4f49")]
		public virtual DataGrid DataGrid
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataGrid)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataGridDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataGridDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataGrid of a ColumnAttribute
		/// <summary>
		/// Gets DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DataGrid GetDataGrid(ColumnAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ColumnAttributeDomainRoleId) as DataGrid;
		}
		
		/// <summary>
		/// Sets DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDataGrid(ColumnAttribute element, DataGrid newDataGrid)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ColumnAttributeDomainRoleId, newDataGrid);
		}
		#endregion
		#region ColumnAttribute domain role code
		
		/// <summary>
		/// ColumnAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid ColumnAttributeDomainRoleId = new global::System.Guid(0x194c9b48, 0xc6fa, 0x464d, 0xbc, 0xa4, 0xd5, 0xd4, 0x8c, 0x2c, 0xc5, 0x06);
		
		/// <summary>
		/// DomainRole ColumnAttribute
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.ColumnAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns/ColumnAttribute.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns/ColumnAttribute.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DataGrid", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns/ColumnAttribute.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("194c9b48-c6fa-464d-bca4-d5d48c2cc506")]
		public virtual ColumnAttribute ColumnAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ColumnAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, ColumnAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ColumnAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Columns of a DataGrid
		/// <summary>
		/// Gets a list of Columns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ColumnAttribute> GetColumns(DataGrid element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ColumnAttribute>, ColumnAttribute>(element, DataGridDomainRoleId);
		}
		#endregion
		#region DataGrid link accessor
		/// <summary>
		/// Get the list of DataGridHasColumns links to a DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns> GetLinksToColumns ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid dataGridInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns>(dataGridInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.DataGridDomainRoleId);
		}
		#endregion
		#region ColumnAttribute link accessor
		/// <summary>
		/// Get the DataGridHasColumns link to a ColumnAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns GetLinkToDataGrid (global::SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute columnAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns>(columnAttributeInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.ColumnAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ColumnAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DataGridHasColumns instance accessors
		
		/// <summary>
		/// Get any DataGridHasColumns links between a given DataGrid and a ColumnAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.DataGridDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns link in links )
			{
				if ( target.Equals(link.ColumnAttribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DataGridHasColumns link between a given DataGridand a ColumnAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.ColumnAttribute target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns.DataGridDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridHasColumns link in links )
			{
				if ( target.Equals(link.ColumnAttribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace SchneiderElectricDMS.PowerFunctionsReportDSL
{
	/// <summary>
	/// DomainRelationship DataGridJMSViewModel
	/// Description for
	/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel
	/// </summary>
	[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("65ab45bd-1318-49bb-ae12-042d2aea3937")]
	public partial class DataGridJMSViewModel : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DataGridJMSViewModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x65ab45bd, 0x1318, 0x49bb, 0xae, 0x12, 0x04, 0x2d, 0x2a, 0xea, 0x39, 0x37);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DataGridJMSViewModel link in the same Partition as the given DataGrid
		/// </summary>
		/// <param name="source">DataGrid to use as the source of the relationship.</param>
		/// <param name="target">JMSModel to use as the target of the relationship.</param>
		public DataGridJMSViewModel(DataGrid source, JMSModel target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DataGridJMSViewModel.DataGridDomainRoleId, source), new DslModeling::RoleAssignment(DataGridJMSViewModel.JMSModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataGridJMSViewModel(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataGridJMSViewModel(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataGridJMSViewModel(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataGridJMSViewModel(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DataGrid domain role code
		
		/// <summary>
		/// DataGrid domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataGridDomainRoleId = new global::System.Guid(0x06ef3887, 0xb487, 0x45ca, 0x9f, 0xfb, 0x75, 0xbb, 0xe9, 0xfd, 0xcc, 0xb6);
		
		/// <summary>
		/// DomainRole DataGrid
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel.DataGrid
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel/DataGrid.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel/DataGrid.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "JMSModel", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel/DataGrid.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("06ef3887-b487-45ca-9ffb-75bbe9fdccb6")]
		public virtual DataGrid DataGrid
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataGrid)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataGridDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataGridDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataGrid of a JMSModel
		/// <summary>
		/// Gets DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DataGrid GetDataGrid(JMSModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, JMSModelDomainRoleId) as DataGrid;
		}
		
		/// <summary>
		/// Sets DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDataGrid(JMSModel element, DataGrid newDataGrid)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, JMSModelDomainRoleId, newDataGrid);
		}
		#endregion
		#region JMSModel domain role code
		
		/// <summary>
		/// JMSModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid JMSModelDomainRoleId = new global::System.Guid(0x45b0af11, 0xef66, 0x4525, 0xbb, 0x6d, 0x29, 0x23, 0x96, 0x3c, 0xe3, 0xb2);
		
		/// <summary>
		/// DomainRole JMSModel
		/// Description for
		/// SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel.JMSModel
		/// </summary>
		[DslDesign::DisplayNameResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel/JMSModel.DisplayName", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel/JMSModel.Description", typeof(global::SchneiderElectricDMS.PowerFunctionsReportDSL.PowerFunctionsReportDSLDomainModel), "SchneiderElectricDMS.PowerFunctionsReportDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DataGrid", PropertyDisplayNameKey="SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel/JMSModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("45b0af11-ef66-4525-bb6d-2923963ce3b2")]
		public virtual JMSModel JMSModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (JMSModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, JMSModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, JMSModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access JMSModel of a DataGrid
		/// <summary>
		/// Gets JMSModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static JMSModel GetJMSModel(DataGrid element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DataGridDomainRoleId) as JMSModel;
		}
		
		/// <summary>
		/// Sets JMSModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetJMSModel(DataGrid element, JMSModel newJMSModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DataGridDomainRoleId, newJMSModel);
		}
		#endregion
		#region DataGrid link accessor
		/// <summary>
		/// Get the DataGridJMSViewModel link to a DataGrid.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel GetLinkToJMSModel (global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid dataGridInstance)
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel>(dataGridInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel.DataGridDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DataGrid not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region JMSModel link accessor
		/// <summary>
		/// Get the DataGridJMSViewModel link to a JMSModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel GetLinkToDataGrid (global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModel jMSModelInstance)
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel>(jMSModelInstance, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel.JMSModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of JMSModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DataGridJMSViewModel instance accessors
		
		/// <summary>
		/// Get any DataGridJMSViewModel links between a given DataGrid and a JMSModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel> GetLinks( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModel target )
		{
			global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel> outLinks = new global::System.Collections.Generic.List<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel>();
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel.DataGridDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel link in links )
			{
				if ( target.Equals(link.JMSModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DataGridJMSViewModel link between a given DataGridand a JMSModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel GetLink( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGrid source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.JMSModel target )
		{
			global::System.Collections.Generic.IList<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel> links = DslModeling::DomainRoleInfo.GetElementLinks<global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel>(source, global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel.DataGridDomainRoleId);
			foreach ( global::SchneiderElectricDMS.PowerFunctionsReportDSL.DataGridJMSViewModel link in links )
			{
				if ( target.Equals(link.JMSModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
