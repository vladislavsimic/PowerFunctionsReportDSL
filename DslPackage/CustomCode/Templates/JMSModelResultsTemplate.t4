<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".txt" #>
<#@ PowerFunctionsReportDSL processor="PowerFunctionsReportDSLDirectiveProcessor" requires="fileName='Sample.ui'"  #>
<#@ parameter name="delimiter" type="System.String" #>
<#@ import namespace="SchneiderElectricDMS.PowerFunctionsReportDSL.CustomCode" #>
<#@ import namespace="SchneiderElectricDMS.PowerFunctionsReportDSL.CustomCode.Converters" #>
<#@ import namespace="SchneiderElectricDMS.PowerFunctionsReportDSL.CustomCode.Helpers " #>
<#
  // Create a file segment for each element:
   foreach (ModelType type in this.ModelRoot.Types)
   { 
	   if(type is JMSModel)
	   {
		    JMSModel jmsModel = type as JMSModel;
            if(!jmsModel.ShouldGenerate || jmsModel.Type != JMSResultType.Results) continue;

    // First item is the delimiter:
#>
<#= string.Format(delimiter, type.Name) #>
//###############################################################
//														        #
//	This code was generated by a PowerFunctionsReportDSL tool.	#
//	Changes to this file may cause incorrect behavior	        #
//	and will be lost if the code is regenerated.		        #
//														        #
//###############################################################

using System.Runtime.Serialization;
using TelventDMS.Common.DMS.Common;

<#
    string classNamespace = "TelventDMS.Services.JobManagerService." + this.ModelRoot.Name + "Report." + jmsModel.Name;
    string superclass = string.Empty;
    if (jmsModel.Superclass != null)
    {
        superclass = " : " + jmsModel.Superclass.Name;

    }
#> 
namespace <#=classNamespace#>
{
<#
    if(jmsModel.IsDataContract) 
    {
#>
    [DataContract]
<#
    }
#>
<#
    string knownTypes = string.Empty;
    if(jmsModel.MainReportClass)
    {
        knownTypes  = JMSHelper.GetKnownTypes(jmsModel);
#>
<#
    }
#>
    <#=knownTypes#>
    public class <#=jmsModel.Name#><#=superclass#>
    {

<#
    if(jmsModel.HasDefaultConstructor)
    {
#>
        #region Constructors

        public <#=jmsModel.Name#>()
        {
        }        

        #endregion Constructors
<#
    }
#>

        #region Properties

<#
    foreach (ClassAttribute attr in jmsModel.Attributes)
    {
        string customType= TypesToCSharpType.Convert(attr);
        if(attr.IsDataMember)
        {
#>
        [DataMember]
<#
        }
#>
        public <#=customType#> <#=attr.Name#> { get; set; }
<#
    }
     string associationProperties = JMSHelper.GetJMSModelAssociationProperties(jmsModel);
#>
        <#=associationProperties#>
        #endregion Properties
    }
}
<#
	   }
   }
#>