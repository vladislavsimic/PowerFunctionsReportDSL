<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".txt" #>
<#@ PowerFunctionsReportDSL processor="PowerFunctionsReportDSLDirectiveProcessor" requires="fileName='Sample.ui'"  #>
<#@ parameter name="delimiter" type="System.String" #>
<#@ import namespace="SchneiderElectricDMS.PowerFunctionsReportDSL.CustomCode" #>
<#@ import namespace="SchneiderElectricDMS.PowerFunctionsReportDSL.CustomCode.Converters" #>
<#@ import namespace="SchneiderElectricDMS.PowerFunctionsReportDSL.CustomCode.Model" #>
<#@ import namespace="System.Collections.Generic" #>
<#= string.Format(delimiter, this.ModelRoot.Name) #>
//###############################################################
//														        #
//	This code was generated by a PowerFunctionsReportDSL tool.	#
//	Changes to this file may cause incorrect behavior	        #
//	and will be lost if the code is regenerated.		        #
//														        #
//###############################################################
<#
    UIReportDataProvider dataProvider = new UIReportDataProvider(this.ModelRoot);
    dataProvider.ObtainCode();
    Dictionary<string, string> GeneratedCode = dataProvider.GeneratedCode;
#>

<#=GeneratedCode["usings"]#>

namespace <#=GeneratedCode["classNamespace"]#>
{
    public partial class <#=this.ModelRoot.Name#>ReportDataProvider
    {
        #region Fields

<#=GeneratedCode["fields"]#>

        #endregion Fields

        #region Constructor

<#=GeneratedCode["constructor"]#>

        #endregion Constructor

        #region Properties

        public <#=this.ModelRoot.Name#>ReportJobParam ReportParameter { get; set; }

        public bool IsInitialized { get; set; }

        public <#=this.ModelRoot.Name#>ReportView ReportView
		{
			get
			{
				return reportView;
			}
		}

        public <#=this.ModelRoot.Name#>ReportJob Job
		{
			get
			{
				return job;
			}
		}

        public IJobManager JobManager
		{
			get
			{
				return jobManager;
			}
		}

        public bool IsTabularViewActive
		{
			get
			{
				return isTabularViewActive;
			}
		}

        #endregion Properties

        #region Methods

        public void Init()
		{
			IsInitialized = true;

			job.HierarchyType = ReportParameter.HierarchyType;
			job.ReportType = ReportParameter.ReportType;
			job.SelectedRecords = new List<long>();
			messageHelper.ShowMessage("<#=this.ModelRoot.Name#> Report: <#=this.ModelRoot.Name#>ReportJob - Init");
			jobManager.StartAsyncJob(jobGuid, job, ResultHandler);
		}
    
        public void ProvideRecords(List<long> itemIds)
		{
			ReportParameter.SelectedRecords = itemIds;
			messageHelper.ShowMessage("<#=this.ModelRoot.Name#> Report: <#=this.ModelRoot.Name#>ReportJob - ProvideRecords");
			jobManager.ModifyAsyncJob(jobGuid, ReportParameter);
		}

		public void Reset()
		{
			ReportParameter.SelectedRecords = new List<long>();
			messageHelper.ShowMessage("<#=this.ModelRoot.Name#> Report: <#=this.ModelRoot.Name#>ReportJob - Reset");
			jobManager.ModifyAsyncJob(jobGuid, ReportParameter);
		}

		/// <summary>
		/// Refreshes report data
		/// </summary>
		public void Refresh()
		{
			messageHelper.ShowMessage("<#=this.ModelRoot.Name#> Report: <#=this.ModelRoot.Name#>ReportJob - Refresh");
			jobManager.ModifyAsyncJob(jobGuid, new RefreshParam());
		}

		/// <summary>
		/// Terminate async job
		/// </summary>
		public void Terminate()
		{
			jobManager.TerminateAsyncJob(jobGuid);
			messageHelper.HideMessage();
		}

        public void ShowTabularView()
		{
			isTabularViewActive = true;
		}

		public void ShowHierarchyView()
		{
			isTabularViewActive = false;
		}

<#=GeneratedCode["methods"]#>

        #endregion Methods

    }
}