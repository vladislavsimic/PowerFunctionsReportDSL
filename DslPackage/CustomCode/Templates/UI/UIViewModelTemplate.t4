<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".txt" #>
<#@ PowerFunctionsReportDSL processor="PowerFunctionsReportDSLDirectiveProcessor" requires="fileName='Sample.ui'"  #>
<#@ parameter name="delimiter" type="System.String" #>
<#@ import namespace="SchneiderElectricDMS.PowerFunctionsReportDSL.CustomCode" #>
<#@ import namespace="SchneiderElectricDMS.PowerFunctionsReportDSL.CustomCode.Converters" #>
<#@ import namespace="SchneiderElectricDMS.PowerFunctionsReportDSL.CustomCode.Model" #>
<#@ import namespace="System.Collections.Generic" #>

<#
  // Create a file segment for each element:
   foreach (ModelType type in this.ModelRoot.Types)
   { 
	   if(type is JMSModel)
	   {
		    JMSModel jmsModel = type as JMSModel;
            if(!jmsModel.ShouldGenerate || jmsModel.Type != JMSResultType.Record) continue;

    // First item is the delimiter:
#>
<#= string.Format(delimiter, type.Name) #>
//###############################################################
//														        #
//	This code was generated by a PowerFunctionsReportDSL tool.	#
//	Changes to this file may cause incorrect behavior	        #
//	and will be lost if the code is regenerated.		        #
//														        #
//###############################################################
<#
    UIViewModel uiViewModel = new UIViewModel(jmsModel);
    uiViewModel.ObtainCode();
    Dictionary<string, string> props = uiViewModel.Properties;
#>

<#=props["usings"]#>

<#=props["classNamespace"]#>
{
    public partial class <#=jmsModel.Name#>ViewModel : ViewModelBase, ILocatable
    {
        #region Fields
        
<#=props["fields"]#>
    
        #endregion Fields        

        #region Constructors

<#=props["defaultConstructor"]#> 

<#=props["constructor"]#>       

        #endregion Constructors

        #region Properties
        
<#=props["properties"]#>

        #endregion Properties
    }
}
<#
	   }
   }
#>